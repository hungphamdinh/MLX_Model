{"text":"Q: Explain how transformFromCronExpression distinguishes between daily and weekly frequency. A: It checks if the cron’s dayOfMonth or dayOfWeek expressions indicate weekdays (MON-FRI) or wildcards, mapping to daily or weekly accordingly."}
{"text":"Q: How does useMemo optimize the computation of pendingMap in useApprovalHandling? A: It memoizes the map result until detailInfo or fieldsChange change, avoiding expensive recalculation on every render."}
{"text":"Q: What does the disabledBtn condition in ConfigRecurrenceModal enforce? A: It disables the Accept button unless all required fields—endDate, onDay/dayOfWeeks, and durations—meet criteria based on frequency and showDuration flag."}
{"text":"Q: Describe how onChangeDay handles nested keys when updating form values. A: If nestedKey is provided, it retrieves the current nested object, merges in the new sanitized value, and calls setFieldValue on the parent key."}
{"text":"Q: How is the isNearestWeekday flag used when generating cron expressions? A: If true, it appends 'W' to the dayOfMonth part, instructing the scheduler to use the nearest weekday to that date."}
{"text":"Q: Why does FormLazyDropdown use getList callback instead of a static options array? A: To support on-demand fetching with pagination and search, which is necessary for large data sets like employees or tenants."}
{"text":"Q: How does the ApprovalSection ensure approval order? A: It checks prevLevelsApproved by filtering matrix entries with lower levels and ensuring they are all approved before showing buttons."}
{"text":"Q: What is the effect of setting formChildProps.editable to match.isEditable? A: It directly enables or disables the text input capability of the form field based on backend config rules."}
{"text":"Q: Explain why setValue('files', files) runs when _.size(files) changes. A: To synchronize the form’s files field with the latest API-loaded attachments whenever the files array length updates."}
{"text":"Q: How does the onBtRepeatPress handler in RecurrenceSetting interact with the modal? A: It sets visible to true, causing the ConfigRecurrenceModal to render and allow users to adjust recurrence settings."}
{"text":"// ===== TaskManagement ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: Why use withErrorHandling(GET_TASK_LIST, getTaskList)? A: To automatically dispatch GET_TASK_LIST.REQUEST before the API call and GET_TASK_LIST.SUCCESS or GET_TASK_LIST.FAILURE after, centralizing error and lifecycle handling."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: Which saga watcher handles ADD_TASK.REQUEST? A: A watcher using takeEvery(ADD_TASK.REQUEST, handleAddTask) invokes the addTask worker, uploads files, navigates back, and dispatches ADD_TASK.SUCCESS or ADD_TASK.FAILURE."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: How does the reducer respond to GET_TASK_DETAIL.SUCCESS? A: It sets state.taskDetail = payload, storing the fetched task details in the Redux store."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: Why call NavigationServices.goBack() after updateTask? A: To navigate back automatically once the task update and any file uploads complete successfully, ensuring a smooth UX."}
{"text":"// ===== Feedback ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: How does detailFB(id) wrap its API call? A: It dispatches DETAIL_FB.REQUEST(id), calls RequestApi.getDetailFB(id), then dispatches DETAIL_FB.SUCCESS(response) or DETAIL_FB.FAILURE(err) within a try/catch."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: Which saga listens for GET_LIST_FB_REQUEST? A: A watcher saga with takeEvery(GET_LIST_FB_REQUEST, handleGetListFB) calls the getListFB worker and dispatches GET_LIST_FB.SUCCESS or GET_LIST_FB.FAILURE."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: What does GET_LIST_FB_SUCCESS do in the reducer? A: It calls state.list.setData(payload) on the ListModel and returns a deep clone, updating the feedback list in state."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: Why upload files only after createFeedback returns a GUID? A: Because the new feedback GUID is required to associate uploaded files correctly, so uploads occur only on successful creation."}
{"text":"// ===== Booking ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: What does validateRecurringBooking wrap and dispatch? A: It wraps RequestApi.validateRecurringBooking(payload) and, with withLoadingAndErrorHandling(VALIDATE_RECURRING_BOOKING), dispatches VALIDATE_RECURRING_BOOKING.REQUEST, SUCCESS, or FAILURE around the call."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: Which saga watcher handles FILTER_BOOKINGS.REQUEST? A: takeEvery(FILTER_BOOKINGS.REQUEST, handleFilterBookings) is used to fetch filtered bookings and dispatch FILTER_BOOKINGS.SUCCESS or FILTER_BOOKINGS.FAILURE."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: How does GET_ALL_TIMESLOTS.SUCCESS update the reducer? A: It sets state.bookingSlots = payload, storing the fetched timeslot availability in Redux state."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: Why dispatch resetBookingDetailRequest on unmount? A: To clear state.bookingDetail, preventing stale reservation details from appearing when revisiting the booking screen."}
{"text":"Q: What custom hook does Booking use and what data/actions does it expose? A: It uses `useBooking()`, which returns data (`statusList`,`paymentStatusList`,`amenitiesFilter`,`amenityList`,`list`) and actions (`filterBookings`,`getBookingStatus`,`getPaymentStatus`,`getAmenitiesFilter`,`getAmenityDetail`)."}
{"text":"Q: Which pieces of React state does the Booking component manage and why? A: It manages `bookingFilter` (initial values), `selectedFilter` (applied filters), `textSearch` (search keyword), and `visibleSelectAmenity` (controls the amenity modal)."}
{"text":"Q: What effect loads booking status, payment status, and amenities on mount? A: A `useEffect([])` calls `getBookingStatus()`, `getPaymentStatus()`, and `getAmenitiesFilter()` when the screen first renders."}
{"text":"Q: Describe the `getList` handler in Booking. A: It builds `filterParams` with `fromDate`/`toDate` as ISO strings and flags for expired/active, then calls `filterBookings({ page, pageSize, keyword, …filterParams })`."}
{"text":"Q: How is form integration handled in `FormSlotView`? A: It uses `useCommonFormController(name)` to access `value`, `setFieldValue`, and `error`, wraps `SlotView` in `FormControl`, and updates the form on slot changes."}
{"text":"Q: How does `getDatesWithInterval(start,end,interval)` compute dates? A: It parses `interval` to an integer `step`, then loops from `start` to `end`, pushing a new Date every `step` days."}
{"text":"Q: What helper does `generateWeekDays(start,end,dayOfWeeks)` implement? A: It returns all dates between `start` and `end` whose weekday matches any `id` in the `dayOfWeeks` array (1=Sunday)."}
{"text":"Q: How does `ConfigRecurrenceModal` reset fields when frequency changes? A: `onChangeFrequencyVal` clears `every`, then sets defaults: for daily `every='1'` & resets `onType`; for weekly clears `every`; for monthly sets `every='1'`, resets `onType`, and clears `onDay`."}
{"text":"Q: Which local state does `GroupedAmenities` manage and what for? A: It manages `isExpanded` (toggles open/collapse) and `animation` (`Animated.Value` driving rotation and fade) for the group container."}
{"text":"Q: How is the flag behavior implemented in `SlotView`? A: It computes `totalSelected`, shows a flag when some but not all slots are selected, and marks `isFlag` on slots adjacent to checked ones when toggling selection."}
{"text":"Q: How is `bookingWarningMessage` displayed in the UI? A: It renders a `<BookingWarningText>` component with the warning string, styled in warning color, only in add mode when a message exists."}
{"text":"Q: What does the `LoaderContainer` wrapper provide in AddOrEditBooking? A: It displays a loading spinner (`BookingLoading`) while `amenityDetail` is falsy, preventing the form from rendering until data is ready."}
{"text":"Q: How does `SelectAmenityModal` integrate into the AddOrEditBooking workflow? A: It opens when `visibleSelectAmenity` is true (via `onShowSelectAmenity`), allowing the user to choose an amenity and populate the form field via `onAmenitySelect`."}
{"text":"Q: What is the role of `FloatingConversation` in edit mode? A: When editing, it renders a chat floating button tied to the booking’s `guid`, enabling conversation context for the existing booking."}
{"text":"Q: How is the `bookingPeriods` data sourced and why is it needed? A: It's fetched by `useBooking()` hook and used to determine allowed booking windows, driving the bookingWarning logic."}
{"text":"Q: How does `FormDisabledProvider` disable the whole form? A: It wraps the form and passes `disabled={isDisabledForm}` from state, causing all nested form controls to render in a disabled state automatically."}
{"text":"Q: How does the `getTitle()` function decide the screen title? A: It returns the localized string for 'ADD_BOOKING' if `isAddNew` is true, otherwise 'EDIT_BOOKING' for edit mode."}
{"text":"Q: How are `bookingDetail.guid` and `bookingDetail.id` used differently? A: `bookingDetail.id` is used for routing to edit and in FloatingConversation's title prop; `guid` is used by `getFileByReferenceId` and for chat module identification."}
{"text":"Q: Why use `_.size(referenceFiles)` as the effect dependency for setting files? A: To trigger the effect only when the number of `referenceFiles` changes, avoiding unnecessary resets on array identity changes."}
{"text":"Q: How do `getFileByReferenceId` and `getByReferenceIdAndModuleNames` supply file data? A: They fetch reference files for the booking and rule files for the amenity, populating `referenceFiles` and `bookingRuleFiles` for the form fields."}
{"text":"Q: How does the `SlotView` component determine how many slots have been selected? A: It uses `useMemo` to count `slots.filter(item => item.isCheck).length` and stores it in `totalSelected`, recomputing only when `slots` changes."}
{"text":"Q: What condition makes the “flag” icon appear on a slot? A: `showFlag` becomes true when `totalSelected > 0 && totalSelected < numberSlot`, and each unselected slot adjacent to a selected one gets `isFlag=true`, causing `<SlotFlag/>` to render."}
{"text":"Q: How does `FormSlotView` integrate `SlotView` into React Hook Form? A: It uses `useCommonFormController(name)` to get `value`/`setFieldValue`, wraps `SlotView` in `<FormControl>`, and in `onSlotsChange` calls `setFieldValue(newSlots)` plus any `onChange` prop."}
{"text":"Q: How is `calculateDepositPrice` memoized? A: Wrapped in `useCallback` depending only on `slots`, so the reference changes only when slots array changes."}
{"text":"Q: What happens when the user taps a slot? A: `onSelectSlot(index)` toggles `isCheck` for that slot, clears other checks if selecting a non-flag new slot, then recomputes `isFlag` for neighbors before calling `onSlotsChange([...slots])`."}
{"text":"Q: How does the component decide between “Add” and “Edit” mode at startup? A: It reads `useRoute().name` and sets `isAddNew = (name==='addBooking')`, `isEdit = (name==='editBooking')`. This controls which effects run, which UI elements display, and whether `addBooking` or `updateBooking` is called."}
{"text":"Q: Which pieces of data must be loaded before rendering the form, and how is loading handled? A: `amenityDetail` (to know available slots, deposit rules), `bookingSlots` (initial slot availability), and reference files. A `<LoaderContainer>` wraps the form, showing `<BookingLoading>` until `amenityDetail` is truthy."}
{"text":"Q: How are `startDate` and `endDate` computed for a new booking? A: They derive from the first and last checked slot’s `startTime` and `endTime` respectively, inside `onSave` when `isAddNew` is true."}
{"text":"Q: What logic handles recurring bookings inside `onSave`? A: If `formValues.recurrence` exists, `onSave` calls `await recurringBooking(formValues, payload)` and returns early, skipping the single-date API call."}
{"text":"Q: How does `validateRecurringBooking` integrate with `statusList`? A: The call returns `res.status` code; `matchedStatus` is found via `statusList.find` to get the human-readable status name for the confirmation modal."}
{"text":"Q: How does the `SlotView` component determine how many slots have been selected? A: It uses `useMemo` to count `slots.filter(item => item.isCheck).length` and stores it in `totalSelected`, recomputing only when `slots` changes."}
{"text":"Q: What condition makes the “flag” icon appear on a slot? A: `showFlag` becomes true when `totalSelected > 0 && totalSelected < numberSlot`, and each unselected slot adjacent to a selected one gets `isFlag=true`, causing `<SlotFlag/>` to render."}
{"text":"Q: How does `FormSlotView` integrate `SlotView` into React Hook Form? A: It uses `useCommonFormController(name)` to get `value`/`setFieldValue`, wraps `SlotView` in `<FormControl>`, and in `onSlotsChange` calls `setFieldValue(newSlots)` plus any `onChange` prop."}
{"text":"Q: How is `calculateDepositPrice` memoized? A: Wrapped in `useCallback` depending only on `slots`, so the reference changes only when slots array changes."}
{"text":"Q: What happens when the user taps a slot? A: `onSelectSlot(index)` toggles `isCheck` for that slot, clears other checks if selecting a non-flag new slot, then recomputes `isFlag` for neighbors before calling `onSlotsChange([...slots])`."}
{"text":"Q: How does the component decide between “Add” and “Edit” mode at startup? A: It reads `useRoute().name` and sets `isAddNew = (name==='addBooking')`, `isEdit = (name==='editBooking')`. This controls which effects run, which UI elements display, and whether `addBooking` or `updateBooking` is called."}
{"text":"Q: Which pieces of data must be loaded before rendering the form, and how is loading handled? A: `amenityDetail` (to know available slots, deposit rules), `bookingSlots` (initial slot availability), and reference files. A `<LoaderContainer>` wraps the form, showing `<BookingLoading>` until `amenityDetail` is truthy."}
{"text":"Q: How are `startDate` and `endDate` computed for a new booking? A: They derive from the first and last checked slot’s `startTime` and `endTime` respectively, inside `onSave` when `isAddNew` is true."}
{"text":"Q: What logic handles recurring bookings inside `onSave`? A: If `formValues.recurrence` exists, `onSave` calls `await recurringBooking(formValues, payload)` and returns early, skipping the single-date API call."}
{"text":"Q: How does `validateRecurringBooking` integrate with `statusList`? A: The call returns `res.status` code; `matchedStatus` is found via `statusList.find` to get the human-readable status name for the confirmation modal."}
{"text":"File: AddOrEditBooking.js, Q: What does `useApp()` provide and how is it used? A: It supplies `getSimpleCompanies` (to fetch company suggestions), `simpleCompanies` data, and `languageId` (for localized amenity remarks), supporting the company booking type and remark localization."}
{"text":"File: AddOrEditBooking.js, Q: How is `getSimpleCompanies` used in the company booking flow? A: Called on mount with `{page:1}` and on-demand by `<FormLazyDropdown>` for paginated search, populating `simpleCompanies.data` for the company selector."}
{"text":"File: AddOrEditBooking.js, Q: What does `useUser()` supply and why is `securitySetting` relevant? A: It provides user preferences like `securitySetting.isShowEmailAndPhone`, which controls rendering of contact email/phone fields in the occupier booking section."}
{"text":"File: AddOrEditBooking.js, Q: Why use `_.size(referenceFiles)` as a dependency when setting form `files`? A: To trigger `setValue('files', referenceFiles)` only when the count of reference files changes, preventing unnecessary resets if the array identity changes with same length."}
{"text":"File: AddOrEditBooking.js, Q: How is caching of lookups achieved for `bookingPurposes` and `amenityList`? A: By checking the context arrays’ lengths (`_.size(amenityList)`) before fetching, the component avoids redundant API calls if data already exists."}
{"text":"File: AddOrEditBooking.js, Q: How can you debounce rapid amenity changes to prevent excessive API calls? A: Wrap `getAmenityDetail` in a debounced callback inside `onAmenitySelect`, or use a debounced effect on `amenityId` with a short delay to batch rapid changes."}
{"text":"File: AddOrEditBooking.js, Q: How does `useCompatibleForm` work with the validation schema? A: It calls React Hook Form’s `useForm` under the hood with `defaultValues` and a resolver from `useYupValidationResolver(validationSchema)`, wiring up Yup validation to the form methods."}
{"text":"File: AddOrEditBooking.js, Q: How is outsider email validated? A: The `email` field uses `.nullable().when('bookingType', { is: outsider, then: Yup.string().required(requiredMessage).email(I18n.t('EMAIL_IS_INVALID')), otherwise: Yup.string().nullable() })`, enforcing required + valid email only for outsiders."}
{"text":"File: AddOrEditBooking.js, Q: How would you extend the schema to add a max-length rule on `remark`? A: Add a `remark: Yup.string().max(200, I18n.t('MAX_200_CHAR')).nullable()` entry to `baseSchema` before calling `Yup.object().shape`."}
{"text":"File: AddOrEditBooking.js, Q: Why is `calculateDepositPrice` wrapped in `useCallback`? A: To memoize the function and ensure its identity only changes when the `slots` array changes, preventing unnecessary effect re-runs."}
{"text":"File: AddOrEditBooking.js, Q: What happens if no `matchingRule` is found? A: The function returns without calling `setValue`, leaving the deposit price unchanged; no user feedback is provided in this case."}
{"text":"File: AddOrEditBooking.js, Q: Why map `bookingTimes` into a minimal `{startDate,endDate}` shape? A: To reduce payload size and send only essential data to the API, avoiding extraneous fields that could cause validation errors."}
{"text":"File: AddOrEditBooking.js, Q: How is `matchedStatus` determined? A: By finding the status object in `statusList` whose `statusCode` matches `res.status`, then using its `.name` for display in the confirmation modal."}
{"text":"File: AddOrEditBooking.js, Q: What fields are set on `bookingRequestData`? A: All returned fields from `res` plus `amenityName`, `requestedBy`, `createdDate`, `status` (human-readable), `validSlots`, and `invalidSlots` (defaulting to empty array if undefined)."}
{"text":"File: AddOrEditBooking.js, Q: Why include `amenityName` in `bookingRequestData`? A: To display the name of the booked amenity in the confirmation modal, helping users verify which resource they are booking."}
{"text":"File: AddOrEditBooking.js, Q: What does the `handleConfirm` function do? A: To finalize the recurring booking flow by fetching the latest form values, calling `onSave` with them, and then closing the confirmation modal (`setConfirmationVisible(false)`)."}
{"text":"File: AddOrEditBooking.js, Q: What is the first step inside `onSave`? A: Filter `formValues.files` to include only items with a `path` property (`const uploadFiles = formValues.files.filter(item => item.path)`), so only newly added local files are uploaded."}
{"text":"File: AddOrEditBooking.js, Q: How are `slotStartTime` and `slotEndTime` determined for new bookings? A: By finding the first and last checked slots (`formValues.slots.filter(e => e.isCheck)`), and extracting their `startTime` and `endTime` respectively."}
{"text":"File: AddOrEditBooking.js, Q: How and when is `paymentStatus` added to the payload? A: If `amenityDetail.isUseDeposited` is true, the code sets `payload.paymentStatus = formValues.paymentStatus.paymentStatusCode`, including it only when required."}
{"text":"File: AddOrEditBooking.js, Q: Why is the event name `'UpdateListBooking'` emitted? A: To notify the booking list screen’s subscriber to reload its data, reflecting the new or updated booking immediately."}
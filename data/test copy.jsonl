{"text":"File: AddOrEditAsset/DetailTab.js, Q: What does the defaultValues object initialize in DetailTab? A: It sets initial values for many fields including assetName, assetCode, assetType (null), purchasedDate (null), price (object with text and rawValue), serialNumber, warrantDate, description, companyCode, companyName, companyAddress, companyPhone, code, unitLocation, inventoryBrand (null), locationType ([1] by default), a reminder object (with emails array, isActive flag, users array and reminderDay), files (empty array), assetCreationTime and model."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Which fields are marked as required in the Yup validation schema? A: The schema created with Yup requires that assetName and description are non-empty strings and that assetType is an object (nullable) but must not be null."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is the isIMT boolean computed and what does it represent? A: It is set to true when the form is not in add mode (!isAddNew) and assetDetail.referenceId has a length greater than zero; this indicates the asset is imported and certain fields such as assetType should be disabled."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What value is assigned to the price field by default? A: The constant defaultCost defines price as { text: ‘0’, rawValue: 0 }, representing zero cost both in display and numeric form."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are asset types loaded into the form? A: useAsset().getAssetTypes is called in a useEffect on mount with { page:1, keyword:’’ }, and the FormLazyDropdown for assetType calls getAssetTypes with page and keyword whenever the user scrolls or searches."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are employees retrieved for the reminder dropdown? A: The parent screen calls getEmployees() via useUser, and the FormLazyDropdown in the reminder section passes getEmployees as its getList callback to load more employees when the user scrolls or searches."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What role does the useFile hook play in DetailTab? A: It provides getFileReference to retrieve document URLs when editing, resetFiles to clear uploads on unmount, and fileUrls which are watched so that when new files are uploaded they are assigned to the form’s files field."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does getInitialValueForUpdate construct initial form values for editing? A: It copies data from assetDetail, converts purchasedDate and warrantDate using parseDate, sets price as an object with formatted text and raw value, extracts company details into companyCode, companyName, companyAddress and companyPhone, sets company to an object containing companyId and a representative name, converts reminder.reminderInMinutes to reminderDay using minutesToDays, and wraps locationType in an array."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What parameters are passed to the API when submitting the form? A: In onSubmit, the component builds params by spreading form values and overriding fields: locationId and unitId extracted from location and unit, locationType as the first entry of the locationType array, price as price.rawValue, companyId, assetTypeId, inventoryBrandId, and a reminder object with userIds extracted from reminder.users and reminderInMinute computed via daysToMinutes(reminder.reminderDay)."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does addEmailAndResetInput update the reminder emails? A: It pushes the current userEmail onto the reminder.emails array using setValue, and then clears the userEmail field in the form."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What does the removeEmail function do? A: It removes an email from reminder.emails by filtering out the entry at the given index and updating the form field with the new array."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does onCheckEmail validate and add an email? A: It reads the userEmail field using watch(‘userEmail’), validates it using validateEmail; if invalid, it shows a modal error; otherwise it calls addEmailAndResetInput to append the email to the list."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What options are provided for locationTypes and how are they used? A: locationTypes is an array with two objects: one for unit location (value:1) and one for common location (value:0), each labelled with I18n translation keys; it is passed to FormRadioGroup to allow users to choose the type of location."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does getDefaultEmployees build the display title for the employee dropdown? A: If assetDetail.reminder.users exists, it maps each user’s displayName and joins them with commas to create a single string; otherwise it returns an empty string."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Which useEffect fetches asset types on mount? A: An effect with an empty dependency array invokes getAssetTypes with { page:1, keyword:’’ } to load the list of asset types when the component first renders."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the component handle updates to uploaded files? A: A useEffect watches fileUrls.length; if fileUrls are present, it calls setValue(‘files’, fileUrls) to update the form; the cleanup function invokes resetFiles to clear them on unmount."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: When does the form reset to updated values? A: Another useEffect listens to assetDetail; whenever it changes and is defined, it calls formMethods.reset(getInitialValueForUpdate()) to populate the form with the latest asset data."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What utility functions handle date conversions for reminders? A: minutesToDays converts reminder.reminderInMinutes to reminderDay when loading existing values, and daysToMinutes converts reminderDay back to minutes before submitting the form."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is the price represented in the form and converted for submission? A: In the form, price is an object with text displaying the formatted amount and rawValue holding the numeric value; on submit, only price.rawValue is included in the API params."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What company fields become read-only inputs after selection? A: Once a company is selected via FormSuggestionPicker, fields for companyCode, companyAddress and companyPhone are populated and displayed in FormInput components with editable=false."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Which additional fields are shown only when editing an asset? A: When !isAddNew, the component displays a TextBox showing the asset’s active/inactive status and a read-only FormInput for the asset code under the info section."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What controls whether the reminder inputs are visible? A: A FormSwitch bound to reminder.isActive toggles the visibility of the reminder fields—employee list, reminder day input, email input and existing emails list appear only when the switch is on."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the form change when qrFeedbackSetting.isEmbedExternalWebsite is true? A: Instead of rendering the full asset form, it shows a simplified view with inputs for assetName, assetCode, a date field for creation time, a radio group for location type and suggestion pickers for unit or location, plus a status text box; other details like brand or reminder are omitted."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Under what condition is the save button rendered? A: The button appears only if readOnly is false; it calls formMethods.handleSubmit(onSubmit) when pressed and uses I18n.t(‘AD_COMMON_SAVE’) for its title."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the component decide whether to show a unit or location selector? A: It checks the first element of the locationType array: if equal to AssetLocationType.Unit, it displays a suggestion picker for units; if equal to AssetLocationType.Location, it displays one for locations."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What is the purpose of FormDisabledProvider in DetailTab? A: It wraps all form inputs and disables them when the disabled prop is true (based on readOnly), preventing user interaction with fields when the form should be read-only."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the reminder section allow removing an email? A: Each email in reminder.emails is rendered with  and passes onPressRemove which calls removeEmail(index) to filter it out of the list."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are date fields such as purchasedDate, warrantDate and assetCreationTime represented? A: They use FormDate components with mode=\"date\"; purchased and warrant dates are editable unless isIMT disables them, while assetCreationTime is displayed via FormDate with disabled and shows either assetType.creationTime or assetDetail.creationTime."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What happens after a successful submission? A: onSubmit awaits the submitRequest (either addAsset or editAsset); if a response is returned, it navigates back via NavigationService.goBack() and emits ‘ReloadAsset’ using DeviceEventEmitter to refresh asset lists."}
{"text":"File: AddOrEditAsset.js, Q: How does the component determine whether it is adding a new asset or editing an existing one? A: It inspects navigation.state.routeName; if this route name is not ‘detailAssets’, isAddNew is set to true, indicating the screen is for creating a new asset."}
{"text":"File: AddOrEditAsset.js, Q: What data is provided by the useAsset hook? A: useAsset returns an object with asset state containing assetDetail, and two actions: getAssetDetail to fetch an asset’s details by ID and resetAssetDetail to clear the current asset from state."}
{"text":"File: AddOrEditAsset.js, Q: Why does the component call getEmployees from useUser? A: It fetches the list of employees at mount so that the reminder section in the detail tab can present available users when adding or editing an asset."}
{"text":"File: AddOrEditAsset.js, Q: What purpose does the tabIndex state serve? A: It tracks which tab is currently selected in the segment control, determining whether to display the Detail tab, job request history, preventive maintenance history, maintenance plan list or inspection history."}
{"text":"File: AddOrEditAsset.js, Q: How is the array of tab labels defined and what do they represent? A: tabs is an array of translation keys: [‘AD_ASSETS_TAB_DETAIL’,‘PM_HISTORY’,‘JR_HISTORY’,‘AD_ASSETS_TAB_LIST’,‘INSPECTION_HISTORY’]; each corresponds to the asset details view, preventive maintenance history, job request history, maintenance plan list and inspection history respectively."}
{"text":"File: AddOrEditAsset.js, Q: What does otherModule represent and how is it determined? A: It refers to assetDetail?.moduleId; if the asset originates from a different module (e.g. Work Order or Plan Maintenance), this value is used to restrict editing and adjust the available tabs."}
{"text":"File: AddOrEditAsset.js, Q: How does the tabValues function decide which tabs to show? A: If isAddNew is true, it returns only [‘AD_ASSETS_TAB_DETAIL’]; if the asset’s module is Modules.WORKORDER, it returns [‘JR_HISTORY’,‘AD_ASSETS_TAB_DETAIL’]; if the module is Modules.PLANMAINTENANCE, it returns [‘AD_ASSETS_TAB_LIST’,‘AD_ASSETS_TAB_DETAIL’]; otherwise it returns all tabs except ‘AD_ASSETS_TAB_LIST’."}
{"text":"File: AddOrEditAsset.js, Q: What component does getListFromOther return for Work Order versus Plan Maintenance modules? A: When otherModule equals Modules.WORKORDER, it returns ; otherwise it returns ."}
{"text":"File: AddOrEditAsset.js, Q: How does getListFromAsset choose which list to render? A: It looks at tabIndex: if tabIndex is 2 it returns ; if 3 it returns ; otherwise it returns ."}
{"text":"File: AddOrEditAsset.js, Q: What happens when the user switches tabs? A: The SegmentControl calls onTabChange, which updates the tabIndex state; this in turn causes the screen to render the appropriate component for that tab."}
{"text":"File: AddOrEditAsset.js, Q: How does the getSegments function structure the tab view? A: It wraps a SegmentControl inside a styled SegmentWrapper and then renders the provided child component below; the segment control scrolls horizontally and displays the tab labels from tabValues()."}
{"text":"File: AddOrEditAsset.js, Q: What logic does showTab use to decide what to render? A: If isAddNew is true, it returns a ; if editing and tabIndex is 0 it returns ; if otherModule is defined and tabIndex > 0 it returns the result of getListFromOther(); otherwise it returns the component from getListFromAsset(); this result is wrapped with getSegments to include the tab bar."}
{"text":"File: AddOrEditAsset.js, Q: How is the screen’s header title determined? A: It passes title={isAddNew ? ‘ADD_ASSET’ : ‘AD_AS_DETAIL_ASSET_TITLE’} to BaseLayout, so the header displays ADD_ASSET for creation mode and AD_AS_DETAIL_ASSET_TITLE for edit mode."}
{"text":"File: AddOrEditAsset.js, Q: When does the component fetch asset details? A: A useEffect watches [id]; on mount or when the id parameter changes it calls getEmployees() and, if id is defined, getAssetDetail(id) to load the asset’s data; it returns a cleanup function that calls resetAssetDetail()."}
{"text":"File: AddOrEditAsset.js, Q: Why does the component call resetAssetDetail on unmount? A: To clear out the asset details from context, preventing stale data from persisting when navigating away from the add/edit screen."}
{"text":"File: AddOrEditAsset.js, Q: How is the readOnly prop for DetailTab calculated? A: When editing, readOnly is set to !!otherModule; if otherModule is truthy (meaning the asset belongs to another module like Work Order or Plan Maintenance), fields in DetailTab are disabled and no save button is shown."}
{"text":"File: AddOrEditAsset.js, Q: What are the Modules constants used for? A: Modules enumerates values such as WORKORDER and PLANMAINTENANCE; they are compared to assetDetail.moduleId to determine which tabs should be available and which lists should be rendered."}
{"text":"File: AddOrEditAsset.js, Q: How does dynamicScrolling in SegmentControl affect the UI? A: It allows the tab bar to scroll horizontally when there are more tabs than fit in the available width, ensuring all tabs are accessible without wrapping."}
{"text":"File: AddOrEditAsset.js, Q: What is different about the UI when adding a new asset compared to editing? A: When adding, only the DetailTab is shown (no tabs bar) and all fields are editable; when editing, a tab bar appears allowing the user to navigate between details, maintenance history, job request history, maintenance plans or inspection history depending on the asset’s module."}
{"text":"File: AddOrEditAsset.js, Q: In what situation does the job request history appear in the tab bar? A: If the asset belongs to the Work Order module (otherModule === Modules.WORKORDER) the tab bar includes JR_HISTORY; also, when editing an asset not tied to a specific module and tabIndex is 2, getListFromAsset() returns JobRequestHistory."}
{"text":"File: AddOrEditAsset.js, Q: What styling does the Wrapper component provide? A: It is a styled View with flex: 1, ensuring its child components expand to fill available space within the screen."}
{"text":"File: AddOrEditAsset.js, Q: Why does SegmentWrapper have a negative top margin? A: The styled component sets margin-top: -20px to pull the segment control up and align it with content in the header area for a cohesive design."}
{"text":"File: AddOrEditAsset.js, Q: How does the screen adjust available tabs for Plan Maintenance assets? A: When otherModule === Modules.PLANMAINTENANCE, tabValues returns only the list tab (AD_ASSETS_TAB_LIST) and the detail tab, excluding the job request history or inspection history tabs."}
{"text":"File: AddOrEditAsset.js, Q: What happens when tabIndex is set to 3? A: When editing an asset not bound to a specific module, tabIndex 3 triggers getListFromAsset() to return , displaying the asset’s inspection history."}
{"text":"File: AddOrEditAsset.js, Q: How does the screen decide whether to wrap the rendered tab contents with getSegments? A: If creating a new asset (isAddNew), it returns the detail tab directly without wrapping; when editing (!isAddNew), it always calls getSegments with the chosen tab content so the segment control and content are displayed together."}
{"text":"File: AddOrEditAsset.js, Q: How are navigation props propagated to child components? A: The navigation object from props is passed down to DetailTab, MaintenancePlan, JobRequestHistory, and InspectionHistory, so that those components can perform navigation actions relative to the current screen context."}
{"text":"File: AddOrEditAsset.js, Q: What happens when the user switches tabs? A: The SegmentControl calls onTabChange, which updates the tabIndex state; this in turn causes the screen to render the appropriate component for that tab."}
{"text":"File: AddAttendance.js, Q: What default values are initialized in the attendance form? A: The form’s default values include date set to new Date(), a temperature object with empty text and rawValue 0, checkingType set to 0 (check-in), and an empty description."}
{"text":"File: AddAttendance.js, Q: Which methods are returned by useCompatibleForm and used in AddAttendance? A: It provides setFieldValue, setFieldError, and watch, allowing the component to update form fields, report validation errors, and observe field values such as checkingType."}
{"text":"File: AddAttendance.js, Q: How is the current checking type tracked in AddAttendance? A: The component calls watch(‘checkingType’) from the form context to monitor whether the user is checking in (0) or checking out (1) and stores this value in the checkingType constant."}
{"text":"File: AddAttendance.js, Q: What actions does the first useEffect perform on mount? A: It calls getCurrentLocation() to fetch the tenant location, requests location permission via requestLocationPermission(requestLocation) if the map isn’t already loading, resets isLoadingMap to false, and sets up a cleanup to clear the geolocation watch."}
{"text":"File: AddAttendance.js, Q: How does AddAttendance set the default checking type based on the last activity? A: In a separate useEffect watching currentLocation and isLoadingMap, if currentLocation.lastActivity.state equals 0 (already checked in), it calls setFieldValue(‘checkingType’, 1) to preselect the check-out option."}
{"text":"File: AddAttendance.js, Q: What does onReceiveLocation do with position data? A: It builds a new region for the map using the current latitude and longitude, and computes the distance to the tenant’s geography using the Haversine formula via distanceBetween2Points, updating region and distance state."}
{"text":"File: AddAttendance.js, Q: How does requestLocation obtain the user’s location? A: It defines platform-specific parameters for accuracy, timeout and cache duration, then calls Geolocation.getCurrentPosition and Geolocation.watchPosition with success and error callbacks and stores the watch ID in watchId.current."}
{"text":"File: AddAttendance.js, Q: What temperature validation occurs before submitting attendance? A: onSubmit checks if the entered temperature (temperature.rawValue) is greater than zero but outside the range 34–42; if so, it uses setFieldError to display a validation message keyed by ‘ATTENDANCE_TEMPERATURE_REQUIRED’ and aborts submission."}
{"text":"File: AddAttendance.js, Q: What data is sent to the API on check-in or check-out? A: The component constructs params including attendanceDateTime (current timestamp via moment().format()), latitude and longitude from the map region, the numeric temperature, a boolean isWell indicating if temperature is ≤37.5°C, and the description from the form."}
{"text":"File: AddAttendance.js, Q: How does AddAttendance choose which attendance function to call? A: It checks whether formData.checkingType equals 0; if so it calls checkInLocation, otherwise it calls checkOutLocation, assigning the chosen function to submitRequest."}
{"text":"File: AddAttendance.js, Q: What occurs after a successful attendance submission? A: The screen navigates back via NavigationService.goBack(), emits an AddOrEditAttendanceSuccess event, constructs a success message using translated strings, the tenant name and the local attendance time, and displays it with noticeUtils.showSuccess()."}
{"text":"File: AddAttendance.js, Q: How is the distance between two points calculated? A: The helper distanceBetween2Points implements the Haversine formula to compute the great-circle distance between two latitude/longitude pairs and returns the result in kilometres."}
{"text":"File: AddAttendance.js, Q: How is the temperature number input configured? A: The temperatureOptions object sets precision to 1 decimal place and uses LocaleConfig.groupSeparator and LocaleConfig.decimalSeparator for formatting; these options are passed to FormNumberInput."}
{"text":"File: AddAttendance.js, Q: When does the submit button become disabled? A: The button’s disabled prop is set to flatCheck, which is true when the computed distance (in metres) exceeds the allowed distanceArea defined in the attendance context."}
{"text":"File: AddAttendance.js, Q: What is the purpose of lastTimeCheckIn and how is it displayed? A: It stores the tenant’s previous localAttendanceDateTime; if the user is checking out (checkingType is 1) and lastTimeCheckIn exists, a hint message shows the last checkout time formatted as HH:mm:ss."}
{"text":"File: AddAttendance.js, Q: Which form fields and inputs are rendered in the attendance form? A: A disabled date picker (FormDate), a segment control (FormSegment) to choose check-in or check-out, a numeric temperature input (FormNumberInput), a multiline description input (FormInput), and an AttendanceMap showing the user’s location."}
{"text":"File: AddAttendance.js, Q: What translation keys label the segment control options? A: The array checkingTypeOptions includes two keys: ‘ATTENDANCE_CHECK_IN’ for check-in and ‘CHECKOUT_TEXT’ for check-out."}
{"text":"File: AddAttendance.js, Q: What does the baseLayoutProps object configure for the page layout? A: It sets the title to ‘ATTENDANCE_CHECK_IN’, disables the bell icon (showBell:false), and adds horizontal padding to the container via containerStyle."}
{"text":"File: AddAttendance.js, Q: How does the component avoid leaking location watchers? A: The cleanup function returned by the first useEffect calls Geolocation.clearWatch(watchId.current), ensuring that continuous location tracking is stopped when the component unmounts."}
{"text":"File: AddAttendance.js, Q: Why is requestLocationPermission called with requestLocation? A: It requests the necessary permissions for accessing location data, and if granted, it executes requestLocation to start obtaining the user’s position via the Geolocation API."}
{"text":"Q: Explain how transformFromCronExpression distinguishes between daily and weekly frequency. A: It checks if the cron’s dayOfMonth or dayOfWeek expressions indicate weekdays (MON-FRI) or wildcards, mapping to daily or weekly accordingly."}
{"text":"Q: How does useMemo optimize the computation of pendingMap in useApprovalHandling? A: It memoizes the map result until detailInfo or fieldsChange change, avoiding expensive recalculation on every render."}
{"text":"Q: What does the disabledBtn condition in ConfigRecurrenceModal enforce? A: It disables the Accept button unless all required fields—endDate, onDay/dayOfWeeks, and durations—meet criteria based on frequency and showDuration flag."}
{"text":"Q: Describe how onChangeDay handles nested keys when updating form values. A: If nestedKey is provided, it retrieves the current nested object, merges in the new sanitized value, and calls setFieldValue on the parent key."}
{"text":"Q: How is the isNearestWeekday flag used when generating cron expressions? A: If true, it appends 'W' to the dayOfMonth part, instructing the scheduler to use the nearest weekday to that date."}
{"text":"Q: Why does FormLazyDropdown use getList callback instead of a static options array? A: To support on-demand fetching with pagination and search, which is necessary for large data sets like employees or tenants."}
{"text":"Q: How does the ApprovalSection ensure approval order? A: It checks prevLevelsApproved by filtering matrix entries with lower levels and ensuring they are all approved before showing buttons."}
{"text":"Q: What is the effect of setting formChildProps.editable to match.isEditable? A: It directly enables or disables the text input capability of the form field based on backend config rules."}
{"text":"Q: Explain why setValue('files', files) runs when _.size(files) changes. A: To synchronize the form’s files field with the latest API-loaded attachments whenever the files array length updates."}
{"text":"Q: How does the onBtRepeatPress handler in RecurrenceSetting interact with the modal? A: It sets visible to true, causing the ConfigRecurrenceModal to render and allow users to adjust recurrence settings."}
{"text":"// ===== TaskManagement ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: Why use withErrorHandling(GET_TASK_LIST, getTaskList)? A: To automatically dispatch GET_TASK_LIST.REQUEST before the API call and GET_TASK_LIST.SUCCESS or GET_TASK_LIST.FAILURE after, centralizing error and lifecycle handling."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: Which saga watcher handles ADD_TASK.REQUEST? A: A watcher using takeEvery(ADD_TASK.REQUEST, handleAddTask) invokes the addTask worker, uploads files, navigates back, and dispatches ADD_TASK.SUCCESS or ADD_TASK.FAILURE."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: How does the reducer respond to GET_TASK_DETAIL.SUCCESS? A: It sets state.taskDetail = payload, storing the fetched task details in the Redux store."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: Why call NavigationServices.goBack() after updateTask? A: To navigate back automatically once the task update and any file uploads complete successfully, ensuring a smooth UX."}
{"text":"// ===== Feedback ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: How does detailFB(id) wrap its API call? A: It dispatches DETAIL_FB.REQUEST(id), calls RequestApi.getDetailFB(id), then dispatches DETAIL_FB.SUCCESS(response) or DETAIL_FB.FAILURE(err) within a try/catch."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: Which saga listens for GET_LIST_FB_REQUEST? A: A watcher saga with takeEvery(GET_LIST_FB_REQUEST, handleGetListFB) calls the getListFB worker and dispatches GET_LIST_FB.SUCCESS or GET_LIST_FB.FAILURE."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: What does GET_LIST_FB_SUCCESS do in the reducer? A: It calls state.list.setData(payload) on the ListModel and returns a deep clone, updating the feedback list in state."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: Why upload files only after createFeedback returns a GUID? A: Because the new feedback GUID is required to associate uploaded files correctly, so uploads occur only on successful creation."}
{"text":"// ===== Booking ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: What does validateRecurringBooking wrap and dispatch? A: It wraps RequestApi.validateRecurringBooking(payload) and, with withLoadingAndErrorHandling(VALIDATE_RECURRING_BOOKING), dispatches VALIDATE_RECURRING_BOOKING.REQUEST, SUCCESS, or FAILURE around the call."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: Which saga watcher handles FILTER_BOOKINGS.REQUEST? A: takeEvery(FILTER_BOOKINGS.REQUEST, handleFilterBookings) is used to fetch filtered bookings and dispatch FILTER_BOOKINGS.SUCCESS or FILTER_BOOKINGS.FAILURE."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: How does GET_ALL_TIMESLOTS.SUCCESS update the reducer? A: It sets state.bookingSlots = payload, storing the fetched timeslot availability in Redux state."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: Why dispatch resetBookingDetailRequest on unmount? A: To clear state.bookingDetail, preventing stale reservation details from appearing when revisiting the booking screen."}
{"text":"Q: What custom hook does Booking use and what data/actions does it expose? A: It uses `useBooking()`, which returns data (`statusList`,`paymentStatusList`,`amenitiesFilter`,`amenityList`,`list`) and actions (`filterBookings`,`getBookingStatus`,`getPaymentStatus`,`getAmenitiesFilter`,`getAmenityDetail`)."}
{"text":"Q: Which pieces of React state does the Booking component manage and why? A: It manages `bookingFilter` (initial values), `selectedFilter` (applied filters), `textSearch` (search keyword), and `visibleSelectAmenity` (controls the amenity modal)."}
{"text":"Q: What effect loads booking status, payment status, and amenities on mount? A: A `useEffect([])` calls `getBookingStatus()`, `getPaymentStatus()`, and `getAmenitiesFilter()` when the screen first renders."}
{"text":"Q: Describe the `getList` handler in Booking. A: It builds `filterParams` with `fromDate`/`toDate` as ISO strings and flags for expired/active, then calls `filterBookings({ page, pageSize, keyword, …filterParams })`."}
{"text":"Q: How is form integration handled in `FormSlotView`? A: It uses `useCommonFormController(name)` to access `value`, `setFieldValue`, and `error`, wraps `SlotView` in `FormControl`, and updates the form on slot changes."}
{"text":"Q: How does `getDatesWithInterval(start,end,interval)` compute dates? A: It parses `interval` to an integer `step`, then loops from `start` to `end`, pushing a new Date every `step` days."}
{"text":"Q: What helper does `generateWeekDays(start,end,dayOfWeeks)` implement? A: It returns all dates between `start` and `end` whose weekday matches any `id` in the `dayOfWeeks` array (1=Sunday)."}
{"text":"Q: How does `ConfigRecurrenceModal` reset fields when frequency changes? A: `onChangeFrequencyVal` clears `every`, then sets defaults: for daily `every='1'` & resets `onType`; for weekly clears `every`; for monthly sets `every='1'`, resets `onType`, and clears `onDay`."}
{"text":"Q: Which local state does `GroupedAmenities` manage and what for? A: It manages `isExpanded` (toggles open/collapse) and `animation` (`Animated.Value` driving rotation and fade) for the group container."}
{"text":"Q: How is the flag behavior implemented in `SlotView`? A: It computes `totalSelected`, shows a flag when some but not all slots are selected, and marks `isFlag` on slots adjacent to checked ones when toggling selection."}
{"text":"Q: How is `bookingWarningMessage` displayed in the UI? A: It renders a `<BookingWarningText>` component with the warning string, styled in warning color, only in add mode when a message exists."}
{"text":"Q: What does the `LoaderContainer` wrapper provide in AddOrEditBooking? A: It displays a loading spinner (`BookingLoading`) while `amenityDetail` is falsy, preventing the form from rendering until data is ready."}
{"text":"Q: How does `SelectAmenityModal` integrate into the AddOrEditBooking workflow? A: It opens when `visibleSelectAmenity` is true (via `onShowSelectAmenity`), allowing the user to choose an amenity and populate the form field via `onAmenitySelect`."}
{"text":"Q: What is the role of `FloatingConversation` in edit mode? A: When editing, it renders a chat floating button tied to the booking’s `guid`, enabling conversation context for the existing booking."}
{"text":"Q: How is the `bookingPeriods` data sourced and why is it needed? A: It's fetched by `useBooking()` hook and used to determine allowed booking windows, driving the bookingWarning logic."}
{"text":"Q: How does `FormDisabledProvider` disable the whole form? A: It wraps the form and passes `disabled={isDisabledForm}` from state, causing all nested form controls to render in a disabled state automatically."}
{"text":"Q: How does the `getTitle()` function decide the screen title? A: It returns the localized string for 'ADD_BOOKING' if `isAddNew` is true, otherwise 'EDIT_BOOKING' for edit mode."}
{"text":"Q: How are `bookingDetail.guid` and `bookingDetail.id` used differently? A: `bookingDetail.id` is used for routing to edit and in FloatingConversation's title prop; `guid` is used by `getFileByReferenceId` and for chat module identification."}
{"text":"Q: Why use `_.size(referenceFiles)` as the effect dependency for setting files? A: To trigger the effect only when the number of `referenceFiles` changes, avoiding unnecessary resets on array identity changes."}
{"text":"Q: How do `getFileByReferenceId` and `getByReferenceIdAndModuleNames` supply file data? A: They fetch reference files for the booking and rule files for the amenity, populating `referenceFiles` and `bookingRuleFiles` for the form fields."}
{"text":"Q: How does the `SlotView` component determine how many slots have been selected? A: It uses `useMemo` to count `slots.filter(item => item.isCheck).length` and stores it in `totalSelected`, recomputing only when `slots` changes."}
{"text":"Q: What condition makes the “flag” icon appear on a slot? A: `showFlag` becomes true when `totalSelected > 0 && totalSelected < numberSlot`, and each unselected slot adjacent to a selected one gets `isFlag=true`, causing `<SlotFlag/>` to render."}
{"text":"Q: How does `FormSlotView` integrate `SlotView` into React Hook Form? A: It uses `useCommonFormController(name)` to get `value`/`setFieldValue`, wraps `SlotView` in `<FormControl>`, and in `onSlotsChange` calls `setFieldValue(newSlots)` plus any `onChange` prop."}
{"text":"Q: How is `calculateDepositPrice` memoized? A: Wrapped in `useCallback` depending only on `slots`, so the reference changes only when slots array changes."}
{"text":"Q: What happens when the user taps a slot? A: `onSelectSlot(index)` toggles `isCheck` for that slot, clears other checks if selecting a non-flag new slot, then recomputes `isFlag` for neighbors before calling `onSlotsChange([...slots])`."}
{"text":"Q: How does the component decide between “Add” and “Edit” mode at startup? A: It reads `useRoute().name` and sets `isAddNew = (name==='addBooking')`, `isEdit = (name==='editBooking')`. This controls which effects run, which UI elements display, and whether `addBooking` or `updateBooking` is called."}
{"text":"Q: Which pieces of data must be loaded before rendering the form, and how is loading handled? A: `amenityDetail` (to know available slots, deposit rules), `bookingSlots` (initial slot availability), and reference files. A `<LoaderContainer>` wraps the form, showing `<BookingLoading>` until `amenityDetail` is truthy."}
{"text":"Q: How are `startDate` and `endDate` computed for a new booking? A: They derive from the first and last checked slot’s `startTime` and `endTime` respectively, inside `onSave` when `isAddNew` is true."}
{"text":"Q: What logic handles recurring bookings inside `onSave`? A: If `formValues.recurrence` exists, `onSave` calls `await recurringBooking(formValues, payload)` and returns early, skipping the single-date API call."}
{"text":"Q: How does `validateRecurringBooking` integrate with `statusList`? A: The call returns `res.status` code; `matchedStatus` is found via `statusList.find` to get the human-readable status name for the confirmation modal."}
{"text":"Q: How does the `SlotView` component determine how many slots have been selected? A: It uses `useMemo` to count `slots.filter(item => item.isCheck).length` and stores it in `totalSelected`, recomputing only when `slots` changes."}
{"text":"Q: What condition makes the “flag” icon appear on a slot? A: `showFlag` becomes true when `totalSelected > 0 && totalSelected < numberSlot`, and each unselected slot adjacent to a selected one gets `isFlag=true`, causing `<SlotFlag/>` to render."}
{"text":"Q: How does `FormSlotView` integrate `SlotView` into React Hook Form? A: It uses `useCommonFormController(name)` to get `value`/`setFieldValue`, wraps `SlotView` in `<FormControl>`, and in `onSlotsChange` calls `setFieldValue(newSlots)` plus any `onChange` prop."}
{"text":"Q: How is `calculateDepositPrice` memoized? A: Wrapped in `useCallback` depending only on `slots`, so the reference changes only when slots array changes."}
{"text":"Q: What happens when the user taps a slot? A: `onSelectSlot(index)` toggles `isCheck` for that slot, clears other checks if selecting a non-flag new slot, then recomputes `isFlag` for neighbors before calling `onSlotsChange([...slots])`."}
{"text":"Q: How does the component decide between “Add” and “Edit” mode at startup? A: It reads `useRoute().name` and sets `isAddNew = (name==='addBooking')`, `isEdit = (name==='editBooking')`. This controls which effects run, which UI elements display, and whether `addBooking` or `updateBooking` is called."}
{"text":"Q: Which pieces of data must be loaded before rendering the form, and how is loading handled? A: `amenityDetail` (to know available slots, deposit rules), `bookingSlots` (initial slot availability), and reference files. A `<LoaderContainer>` wraps the form, showing `<BookingLoading>` until `amenityDetail` is truthy."}
{"text":"Q: How are `startDate` and `endDate` computed for a new booking? A: They derive from the first and last checked slot’s `startTime` and `endTime` respectively, inside `onSave` when `isAddNew` is true."}
{"text":"Q: What logic handles recurring bookings inside `onSave`? A: If `formValues.recurrence` exists, `onSave` calls `await recurringBooking(formValues, payload)` and returns early, skipping the single-date API call."}
{"text":"Q: How does `validateRecurringBooking` integrate with `statusList`? A: The call returns `res.status` code; `matchedStatus` is found via `statusList.find` to get the human-readable status name for the confirmation modal."}
{"text":"File: AddOrEditBooking.js, Q: What does `useApp()` provide and how is it used? A: It supplies `getSimpleCompanies` (to fetch company suggestions), `simpleCompanies` data, and `languageId` (for localized amenity remarks), supporting the company booking type and remark localization."}
{"text":"File: AddOrEditBooking.js, Q: How is `getSimpleCompanies` used in the company booking flow? A: Called on mount with `{page:1}` and on-demand by `<FormLazyDropdown>` for paginated search, populating `simpleCompanies.data` for the company selector."}
{"text":"File: AddOrEditBooking.js, Q: What does `useUser()` supply and why is `securitySetting` relevant? A: It provides user preferences like `securitySetting.isShowEmailAndPhone`, which controls rendering of contact email/phone fields in the occupier booking section."}
{"text":"File: AddOrEditBooking.js, Q: Why use `_.size(referenceFiles)` as a dependency when setting form `files`? A: To trigger `setValue('files', referenceFiles)` only when the count of reference files changes, preventing unnecessary resets if the array identity changes with same length."}
{"text":"File: AddOrEditBooking.js, Q: How is caching of lookups achieved for `bookingPurposes` and `amenityList`? A: By checking the context arrays’ lengths (`_.size(amenityList)`) before fetching, the component avoids redundant API calls if data already exists."}
{"text":"File: AddOrEditBooking.js, Q: How can you debounce rapid amenity changes to prevent excessive API calls? A: Wrap `getAmenityDetail` in a debounced callback inside `onAmenitySelect`, or use a debounced effect on `amenityId` with a short delay to batch rapid changes."}
{"text":"File: AddOrEditBooking.js, Q: How does `useCompatibleForm` work with the validation schema? A: It calls React Hook Form’s `useForm` under the hood with `defaultValues` and a resolver from `useYupValidationResolver(validationSchema)`, wiring up Yup validation to the form methods."}
{"text":"File: AddOrEditBooking.js, Q: How is outsider email validated? A: The `email` field uses `.nullable().when('bookingType', { is: outsider, then: Yup.string().required(requiredMessage).email(I18n.t('EMAIL_IS_INVALID')), otherwise: Yup.string().nullable() })`, enforcing required + valid email only for outsiders."}
{"text":"File: AddOrEditBooking.js, Q: How would you extend the schema to add a max-length rule on `remark`? A: Add a `remark: Yup.string().max(200, I18n.t('MAX_200_CHAR')).nullable()` entry to `baseSchema` before calling `Yup.object().shape`."}
{"text":"File: AddOrEditBooking.js, Q: Why is `calculateDepositPrice` wrapped in `useCallback`? A: To memoize the function and ensure its identity only changes when the `slots` array changes, preventing unnecessary effect re-runs."}
{"text":"File: AddOrEditBooking.js, Q: What happens if no `matchingRule` is found? A: The function returns without calling `setValue`, leaving the deposit price unchanged; no user feedback is provided in this case."}
{"text":"File: AddOrEditBooking.js, Q: Why map `bookingTimes` into a minimal `{startDate,endDate}` shape? A: To reduce payload size and send only essential data to the API, avoiding extraneous fields that could cause validation errors."}
{"text":"File: AddOrEditBooking.js, Q: How is `matchedStatus` determined? A: By finding the status object in `statusList` whose `statusCode` matches `res.status`, then using its `.name` for display in the confirmation modal."}
{"text":"File: AddOrEditBooking.js, Q: What fields are set on `bookingRequestData`? A: All returned fields from `res` plus `amenityName`, `requestedBy`, `createdDate`, `status` (human-readable), `validSlots`, and `invalidSlots` (defaulting to empty array if undefined)."}
{"text":"File: AddOrEditBooking.js, Q: Why include `amenityName` in `bookingRequestData`? A: To display the name of the booked amenity in the confirmation modal, helping users verify which resource they are booking."}
{"text":"File: AddOrEditBooking.js, Q: What does the `handleConfirm` function do? A: To finalize the recurring booking flow by fetching the latest form values, calling `onSave` with them, and then closing the confirmation modal (`setConfirmationVisible(false)`)."}
{"text":"File: AddOrEditBooking.js, Q: What is the first step inside `onSave`? A: Filter `formValues.files` to include only items with a `path` property (`const uploadFiles = formValues.files.filter(item => item.path)`), so only newly added local files are uploaded."}
{"text":"File: AddOrEditBooking.js, Q: How are `slotStartTime` and `slotEndTime` determined for new bookings? A: By finding the first and last checked slots (`formValues.slots.filter(e => e.isCheck)`), and extracting their `startTime` and `endTime` respectively."}
{"text":"File: AddOrEditBooking.js, Q: How and when is `paymentStatus` added to the payload? A: If `amenityDetail.isUseDeposited` is true, the code sets `payload.paymentStatus = formValues.paymentStatus.paymentStatusCode`, including it only when required."}
{"text":"File: AddOrEditBooking.js, Q: Why is the event name `'UpdateListBooking'` emitted? A: To notify the booking list screen’s subscriber to reload its data, reflecting the new or updated booking immediately."}
{"text":"File: VisitorScreen.js, Q: What does useVisitor() provide to VisitorScreen? A: It returns `visitors` state and actions `getAllVisitors`, `getVisitorReasons`, and `scanQRVisitor` for loading reasons and managing the visitor list."}
{"text":"File: VisitorScreen.js, Q: How does filterData adapt to isOfficeSite? A: If `isOfficeSite` is false it shows a `buildingId` dropdown; if true it shows a paginated `companyId` LIST_SELECT with search."}
{"text":"File: VisitorScreen.js, Q: What triggers the [textSearch, selectedFilter] effect? A: Any change to the search text or applied filter calls `getList(1)` to refresh the visitor list."}
{"text":"File: JobRequest.js, Q: What contexts does JobRequest use and why? A: It uses `useJobRequest` for JR/task data, `useTeam` for teams, `useAsset` for asset lookup, `useInventoryRequest` for IR settings, and `useApp` for global settings."}
{"text":"File: JobRequest.js, Q: How many tab indices control which list is shown? A: Three: `tabIndex` for JR vs tasks, `listJRTabIndex` for ALL/TEAM/MY JR, and `listTaskTabIndex` for ALL/MY tasks."}
{"text":"File: JobRequest.js, Q: How does getValueForOptions determine which list to use? A: It checks `tabIndex` and uses `listJRTabIndex` when in JR mode or `listTaskTabIndex` when in task mode to select the proper fetch action."}
{"text":"File: Inventory.js, Q: What does useInventory() provide to the Inventory component? A: It returns `inventories` list state and lookup states (`filterCategories`, `subCategories`, `warehouses`), plus actions `getAllInventories`, `getFilterCategories`, `getSubCategories`, `getLocations`, `detailInventory`, and `getWareHouses`."}
{"text":"File: Inventory.js, Q: What keys does defaultFilter contain and why? A: `defaultFilter` has `isActive: [true]` to default to active items and `isMinimumBalance: [undefined]` to leave that toggle unset initially."}
{"text":"File: Inventory.js, Q: How does getList normalize selectedFilter for the API? A: It spreads `filter`, then remaps `warehouseIds` to `filter.warehouseIds.id`, `categoryIds` to either `subCategoryId` or `categoryIds`, and extracts booleans from `isActive[0]` and `isMinimumBalance[0]`."}
{"text":"File: ListPlanMaintenance.js, Q: How is `planTab` calculated? A: It subtracts `DashboardStatisticTypes.PLAN_MAINTENANCE` from `statisticType`, aligning the statistic code to the correct tab index (0=All,1=Team,2=My PM)."}
{"text":"File: ListPlanMaintenance.js, Q: What does `requestGetTaskList` do? A: Builds a `params` object with `page`, `PageSize`, `keyword`, and `StatusIds`, then calls `getPlanTask` or `getMyPlanTask` based on the current `taskTab`."}
{"text":"File: ListPlanMaintenance.js, Q: How does `requestGetListPlan` normalize filter and sort? A: It extracts dateRange, `statusIds`, `priorityIds`, `teamIds`, and `isOverdue`; formats dates with `moment`; reads the first `sortData`; and builds API params with `isDescending` and `orderByColumn`."}
{"text":"File: Setting.js, Q: How is developer mode enabled? A: Tapping the version text ten times increments `versionCount`; when it reaches 10, `setDeveloperMode(true)` is called and a success toast is shown."}
{"text":"File: Setting.js, Q: Explain the flow in `changeSwitchValue`. A: Toggling on navigates to the terms screen for consent; toggling off opens a confirmation modal before disabling biometrics."}
{"text":"File: Setting.js, Q: Describe the `onLogout` function. A: It calls `logout()` from the App context, triggering the global logout flow and redirecting the user to the login screen."}
{"text":"File: Delivery.js, Q: What triggers data fetch when filters or search change? A: A `useEffect` watching `[textSearch, selectedFilter]` calls `getList(1)` whenever either value changes."}
{"text":"File: Delivery.js, Q: What conditions enable the Batch Pick Up button? A: `allowCheckOut` must be true: at least one selected item, all share the same `unitId`, and all have `statusId === ParcelStatus.WAITING_TO_RECEIVED`."}
{"text":"File: Delivery.js, Q: How is the batch pick-up modal triggered? A: Clicking the “Batch Pick Up” button calls `showPickUpModal()`, which fetches parcels in the selected unit and either prompts confirmation or opens the checkout modal."}
{"text":"File: Delivery.js, Q: How does `onCheckAll` synchronize `selectedItems` and `isSelectAll`? A: It sets `isSelectAll` to the passed boolean and sets `selectedItems` to either the full data array when true or an empty array when false."}
{"text":"File: Delivery.js, Q: How is the alert message constructed in `showPopUpToAskCheckOut`? A: It uses localized strings before and after the count of unselected parcels to inform the user how many remain to pick up."}
{"text":"File: Delivery.js, Q: How are list items rendered to include checkboxes? A: `renderItem` returns `<ItemDelivery checked={…} onCheck={…} />`, passing `checked` when the item is in `selectedItems` or `isSelectAll` is true."}
{"text":"File: Delivery.js, Q: What pattern does this component illustrate? A: The “Filter → Selection → List → Action” composition: filters at the top, a selectable list, and batch actions at the bottom."}
{"text":"File: Delivery.js, Q: How would you unit-test the `getList` parameter mapping? A: Mock `getAllDeliveries`, set `selectedFilter` with known values, call `getList(2)`, and assert `getAllDeliveries` was invoked with the correct normalized object."}
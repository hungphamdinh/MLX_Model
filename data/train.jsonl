{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is the Yup validation schema applied to the form? A: The component passes the schema into `useYupValidationResolver(validationSchema)` and provides it as the `resolver` option to `useCompatibleForm`, integrating Yup validation with react-hook-form."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What effect does the `isIMT` flag have on form inputs? A: When `isIMT` is true (editing an imported asset), fields like assetType, company picker, inventoryBrand, model, serialNumber, purchaseDate and warrantDate are rendered with `disabled` or `editable={false}` to prevent edits."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Why does the component call `getQrFeedbackSetting` inside a `useEffect` on mount? A: It needs to load remote QR feedback configuration before rendering—particularly to decide whether to show the full asset form or the simplified embedded-website branch."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are the nested default values for `reminder` initialized? A: In `defaultValues`, `reminder` is an object with `emails:[]`, `isActive:false`, `users:[]`, and `reminderDay:0`, ensuring the form starts with no notifications set."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the component synchronize uploaded files into the form state and clean up on unmount? A: A `useEffect` watching `fileUrls.length` calls `setValue('files', fileUrls)` when new URLs appear, and its cleanup function calls `resetFiles()` to clear uploads when the component unmounts."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does `getInitialValueForUpdate` populate company-related form fields? A: It destructures `assetDetail.company`, sets `companyCode`, `companyName`, `companyAddress`, `companyPhone` from that object, and constructs a `company` selection object with `id` and a representative name."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Describe how `onSubmit` builds the API parameter object. A: It spreads all form `values`, then overrides: `locationId`, `unitId`, `locationType` (first element), numeric `price`, `companyId`, `assetTypeId`, `inventoryBrandId`, and formats `reminder` with `userIds` array and `reminderInMinute`, before calling `addAsset` or `editAsset`."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What does the `watch` hook provide and how is it used? A: `watch` returns current form values—used to get `userEmail` in `onCheckEmail`, to conditionally render the reminder fields (`watch('reminder.isActive')`), and to destructure `[locationType, assetType]` for conditional UI logic."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is the simplified view rendered when `qrFeedbackSetting.isEmbedExternalWebsite` is true? A: The JSX under that condition shows only assetName, assetCode, creationTime, locationType radio, unit/location picker and status text, omitting all brand, price, reminder and description fields."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are translation keys applied to labels and placeholders? A: Every `label`, `title` or `placeholder` prop is passed through `I18n.t('KEY')`, decoupling UI strings from code and supporting localization."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Explain how `FormLazyDropdown` components load and display remote data. A: They accept `getList` callbacks (e.g. `getAssetTypes` or `getEmployees`) with page and keyword, `options` state, `listExist` to pre-populate, and render a searchable dropdown in `small` mode with a `titleKey` field for display."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What role does `FormDisabledProvider` play in this form? A: It wraps all inputs and disables them when the `readOnly` prop is true, preventing user interaction without having to individually disable each field."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is the price zero default represented and why? A: `defaultCost` is `{ text:'0', rawValue:0 }`, so the `FormMoneyInput` displays “0” and the numeric value starts at zero, avoiding null or undefined values."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are date pickers configured for `purchasedDate`, `warrantDate` and `assetCreationTime`? A: They use `<FormDate mode=\"date\" small />`; `assetCreationTime` is always disabled with its `value` set to `assetType?.creationTime` or `assetDetail.creationTime`."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Why is the entire form wrapped in `AwareScrollView`? A: To allow the long form to scroll within its tab context (`tabLabel`) and to apply horizontal margins for consistent padding."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What does `<ItemUserEmail>` render and how is it connected? A: For each email in `watch('reminder.emails')`, it renders a row with the email and a remove button wired to `removeEmail(index)` to update the form array."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is the default title for the employee multi-select dropdown determined? A: `getDefaultEmployees()` looks at `assetDetail.reminder.users`, maps their `displayName`s and joins with commas, returning an empty string if none exist."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are `locationType` and `assetType` values extracted from `watch`? A: By calling `watch(['locationType','assetType'])` and destructuring into `[locationType, assetType]`, enabling immediate access to those two values for conditional rendering."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does `onCheckEmail` validate and add an email? A: It reads `userEmail` via `watch`, uses `validateEmail`; if invalid, shows an error modal, else calls `addEmailAndResetInput` to append it and clear the input."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Summarize the full submit flow from button press to UI update. A: Clicking the save button triggers `handleSubmit(onSubmit)`, which calls `addAsset` or `editAsset` with parameters and files; on successful response, `NavigationService.goBack()` runs and `DeviceEventEmitter.emit('ReloadAsset')` refreshes the asset list elsewhere in the app."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What loading and error feedback does the component provide during asset submission? A: Currently none; onSubmit awaits the API call but doesn’t set a loading state or catch errors—errors bubble up silently and the save button stays enabled."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How could you add a loading indicator while saving the asset? A: Introduce a `isSubmitting` state, set it true before calling `submitRequest` and false afterward, pass it to the save `Button`’s `loading` prop and disable the form while loading."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the `useEffect` cleanup prevent stale file URLs? A: The effect watching `fileUrls.length` returns a cleanup that calls `resetFiles()`, ensuring any uploaded file references are cleared when the component unmounts."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What `testID` props exist to facilitate UI tests? A: The save button has `testID=\"save-button\"`; you could also add IDs to key inputs (e.g. assetName, assetType, reminder toggle) for more granular test selectors."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How could the `FormLazyDropdown` searches be debounced for performance? A: Wrap the `getAssetTypes` callback in a `_.debounce` or `useDebouncedCallback` so that API requests fire only after the user stops typing for a short delay."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What accessibility props could improve this form? A: Add `accessibilityLabel` and `accessibilityHint` to inputs and buttons, ensure `FormSwitch` has proper `aria-checked`, and group related fields with `accessibilityRole=\"group\"` and `aria-labelledby`."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How would you manage focus after a validation error? A: In the `onSubmit` catch block, find the first field with an error via `formMethods.formState.errors` and call `setFocus(fieldName)` to direct the user’s attention there."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How can error messages be displayed inline under each field? A: Use `formMethods.formState.errors[name]?.message` and render a `<Text style={{ color: Colors.error }}>` under each `FormInput` or dropdown to show the Yup validation message."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What cleanup is needed when the component unmounts to avoid memory leaks? A: Clear any active subscriptions (e.g. file watcher via `resetFiles()`) and cancel pending debounced calls or API requests in `useEffect` cleanup functions."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How could you add keyboard navigation support? A: Implement `onSubmitEditing` on inputs to call `formMethods.handleSubmit(onSubmit)` or focus the next field, and wrap the form in a `KeyboardAvoidingView` to handle mobile keyboards."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How might you internationalize dynamic error messages? A: Use `I18n.t('FIELD_REQUIRED', { field: I18n.t(labelKey) })` in the Yup schema messages and pass those into the resolver so users see localized field names in errors."}
{"text":"File: AddOrEditAsset.js, Q: How does the component fetch initial data on mount and cleanup on unmount? A: It calls getEmployees() and, if an id param exists, getAssetDetail(id) in a useEffect; its cleanup calls resetAssetDetail() to clear stale data."}
{"text":"File: AddOrEditAsset.js, Q: How is the `isAddNew` boolean determined and used? A: `isAddNew` is true when `navigation.state.routeName !== 'detailAssets'`; it controls whether only the DetailTab renders (add mode) or the tab bar appears (edit mode)."}
{"text":"File: AddOrEditAsset.js, Q: How are available tabs filtered based on asset state? A: `tabValues()` filters the `tabs` array: in add mode only the Detail tab; in WORKORDER module only JR and Detail; in PLANMAINTENANCE only List and Detail; otherwise all except List."}
{"text":"File: AddOrEditAsset.js, Q: How does the component render different content for each tab? A: `showTab()` returns DetailTab for tabIndex 0; if `otherModule` is truthy, it uses `getListFromOther()`; else `getListFromAsset()` picks between JobRequestHistory, InspectionHistory or MaintenancePlan based on tabIndex."}
{"text":"File: AddOrEditAsset.js, Q: What is the role of the SegmentWrapper and how is it styled? A: It’s a styled View with white background, 10px padding, and margin-top: -20px to overlay under the header; it contains the horizontally scrollable SegmentControl."}
{"text":"File: AddOrEditAsset.js, Q: How does the `SegmentControl` component receive its configuration? A: Props include `dynamicScrolling`, `overflow`, `scrollEnabled`, `selectedIndex` from state, and `values` from `tabValues()`, with `onChange` updating `tabIndex`."}
{"text":"File: AddOrEditAsset.js, Q: What accessibility considerations are missing in the tab navigation? A: There are no `accessibilityLabel` or `accessibilityRole` props on `SegmentControl`; adding roles like `tablist` and `tab` with proper labels would improve screen-reader support."}
{"text":"File: AddOrEditAsset.js, Q: How could you memoize `tabValues()` to avoid recalculating on each render? A: Wrap it in `useMemo` with dependencies `[isAddNew, otherModule]` so the filtered tab array only updates when those values change."}
{"text":"File: AddOrEditAsset.js, Q: How is the `otherModule` variable determined and what does it signify? A: It’s assigned from `assetDetail?.moduleId`; truthy means the asset originates from another module (Work Order or Plan Maintenance) and readOnly behavior applies."}
{"text":"File: AddOrEditAsset.js, Q: What type of component is `Wrapper` and what style does it provide? A: `Wrapper` is a styled.View with `flex:1`, ensuring the child content fills available vertical space."}
{"text":"File: AddOrEditAsset.js, Q: How does the component handle the default selected tab when editing? A: `tabIndex` is initialized to 0 via `useState(0)`, so the Detail tab is always the initial view after mount."}
{"text":"File: AddOrEditAsset.js, Q: How could you add a loading spinner while asset details are fetched? A: Introduce an `isLoading` state from the asset context, conditionally render `<BaseLayout loading={isLoading}>` or placeholder until `assetDetail` is available."}
{"text":"File: AddOrEditAsset.js, Q: What testIDs could be added to enable end-to-end testing of tab navigation? A: Add `testID` props to `SegmentControl` (e.g. `testID='asset-tab-control'`) and to each child container (e.g. `testID='detail-tab'`, `'history-tab'`, etc.)."}
{"text":"File: AddOrEditAsset.js, Q: How might you simplify the `showTab()` logic? A: Use a lookup map of tabIndex to component, and conditionally wrap with `getSegments()`; reduce nested if/else by extracting helper functions."}
{"text":"File: AddOrEditAsset.js, Q: How could you lazy-load history components to improve performance? A: Wrap JobRequestHistory, InspectionHistory and MaintenancePlan in `React.lazy()` and render inside `<Suspense>` so code splits only load when the tab is active."}
{"text":"File: AddOrEditAsset.js, Q: What potential bug exists when `assetDetail` is null in edit mode? A: If `assetDetail` is falsy and `!isAddNew`, `showTab()` returns `<DetailTab readOnly>` before data arrives, potentially causing undefined prop errors; a placeholder check should guard against null details."}
{"text":"File: AddOrEditAsset.js, Q: How is the component’s `navigation` prop passed to children? A: It forwards `navigation={navigation}` into DetailTab and MaintenancePlan so they can trigger navigation actions internally."}
{"text":"File: AddOrEditAsset.js, Q: How can you ensure consistent margin/padding across tabs? A: Wrap the `getSegments` output in a container with shared style or pass consistent `style` props to child wrappers to avoid UI shifts."}
{"text":"File: AddOrEditAsset.js, Q: What improvements could be made to the `useEffect` dependency array for fetching employees? A: Add `getEmployees` to the dependency array or use a static callback to avoid stale references; otherwise React warns about missing deps."}
{"text":"File: AddOrEditAsset.js, Q: How can you extract tab configuration into a constant to simplify the component? A: Define an array of objects `{ key, labelKey, component }` outside the component and filter/map based on `otherModule` and `tabIndex`, reducing inline logic."}
{"text":"File: AddOrEditAsset.js, Q: Which hard-coded strings could be extracted for localization? A: Tab keys (‘PM_HISTORY’, etc.), segment control values array, and BaseLayout title keys could be centralized in a constants file for translation consistency."}
{"text":"File: AddOrEditAsset.js, Q: How can the logic for filtering tabs be made more declarative? A: Replace `tabValues()` with a mapping object keyed by moduleId and add mode, returning arrays directly rather than multiple `filter` calls."}
{"text":"File: AddOrEditAsset.js, Q: What unit tests should verify the `showTab()` behavior? A: Tests for add mode renders only DetailTab, edit mode with WORKORDER shows correct history, PLANMAINTENANCE shows list & detail, and the fallback case shows all appropriate tabs."}
{"text":"File: AddOrEditAsset.js, Q: How can you avoid lodash dependency for simple array operations? A: Replace `_.get(navigation, 'state.routeName')` with optional chaining `navigation.state?.routeName`, and `_.first(locationType)` with `locationType[0]` in DetailTab."}
{"text":"File: AddOrEditAsset.js, Q: What edge case arises if `tabs` array is reordered? A: Hard-coded indices (e.g. `tabIndex === 2`) break; better to use constants for each tab value rather than numeric indexes to decouple order from logic."}
{"text":"File: AddOrEditAsset.js, Q: How could dependency injection improve testability of hooks? A: Pass `useAsset`, `useUser`, and `useFeedback` as props or context so tests can inject mock implementations without module mocking."}
{"text":"File: AddOrEditAsset.js, Q: What accessibility props are missing for keyboard navigation? A: `accessible` and `accessibilityRole=\"tab\"` on each segment and `accessibilityHint` would allow screen and keyboard users to navigate tabs."}
{"text":"File: AddOrEditAsset.js, Q: How could React.memo optimize re-renders of `DetailTab`? A: Wrap `DetailTab` in `React.memo()` and pass only needed props to prevent unnecessary renders when unrelated tab content changes."}
{"text":"File: AddOrEditAsset.js, Q: How can you add error boundaries around lazy-loaded history components? A: Use `<ErrorBoundary>` around `React.Suspense` fallback when rendering History components to catch and display loading errors gracefully."}
{"text":"File: AddOrEditAsset.js, Q: What pattern can prevent prop drilling of `navigation`? A: Use React Navigation’s `useNavigation()` hook within child components instead of passing `navigation` down explicitly as a prop."}
{"text":"File: AddOrEditAsset.js, Q: Which magic numbers should be replaced with named constants? A: The negative `margin-top: -20px` in `SegmentWrapper` and padding `10px` could be moved to theme spacing constants for consistency."}
{"text":"File: AddOrEditAsset.js, Q: How would you instrument analytics on tab switches? A: Add a call to a tracking service inside `onTabChange` passing the selected `tabValues()[val]` to record user behavior."}
{"text":"File: AddOrEditAsset.js, Q: What considerations are needed for right-to-left (RTL) layouts? A: Ensure `SegmentControl` supports RTL ordering and switch `paddingLeft`/`paddingRight` in `SegmentWrapper` based on I18n layout direction."}
{"text":"File: AddOrEditAsset.js, Q: How could you simplify conditional rendering in `showTab()`? A: Use a switch on a computed `viewMode` string (e.g. 'add', 'detail', 'workorder', 'plan') mapping to components, then wrap with `getSegments` when needed."}
{"text":"File: AddOrEditAsset.js, Q: What improvements could be made to error handling in data fetch effects? A: Add try/catch around `getAssetDetail` and `getEmployees`, and display an error message or fallback UI if network calls fail."}
{"text":"File: AddOrEditAsset.js, Q: How can you decouple layout from business logic for easier reuse? A: Extract tab layout and navigation logic into a reusable `AssetTabs` component, passing only content components as children."}
{"text":"File: AddAttendance.js, Q: What React state hooks are used in AddAttendance and what does each track? A: It uses `useState` three times: `isLoadingMap` (boolean) to track whether the map is currently loading, `distance` (number) to store the computed distance between the user and tenant location, and `region` (object) to hold the latitude/longitude and zoom deltas for the map view."}
{"text":"File: AddAttendance.js, Q: What is the purpose of the `watchId` ref in this component? A: `watchId` is a `useRef` that stores the identifier returned by `Geolocation.watchPosition`, so that the geolocation watcher can be cleared (`Geolocation.clearWatch(watchId.current)`) when the component unmounts."}
{"text":"File: AddAttendance.js, Q: How does AddAttendance request and handle location permissions? A: In the first `useEffect`, after calling `getCurrentLocation()`, it calls `requestLocationPermission(requestLocation)` if the map isn’t already loading; the `requestLocation` callback then invokes `Geolocation.getCurrentPosition` and `watchPosition` with success and error handlers."}
{"text":"File: AddAttendance.js, Q: How are the success and error callbacks for geolocation defined? A: The first argument to `getCurrentPosition` and `watchPosition` is `onReceiveLocation` (which updates `region` and `distance`), the second is an error handler that logs `error.message`, and the third is an options object varying by `Platform.OS`."}
{"text":"File: AddAttendance.js, Q: What criteria disable the submit button for check-in/out? A: The `flatCheck` constant compares `distance.toFixed(2) * 1000` (meters) against `distanceArea`; if the user is outside the allowed radius, `flatCheck` is true and the button’s `disabled` prop is set."}
{"text":"File: AddAttendance.js, Q: How does the component compute the geographical distance? A: The helper `distanceBetween2Points` implements the Haversine formula using the latitude/longitude deltas, multiplies by Earth’s radius (6371 km), and returns the distance in kilometres."}
{"text":"File: AddAttendance.js, Q: How is the tenant’s geography extracted and used? A: It reads `currentLocation.tenantAddress.geography` via `_.get`, stores it in `geography`, and passes both `region` and `geography` to the `<AttendanceMap>` so it can display the user marker and tenant boundary."}
{"text":"File: AddAttendance.js, Q: What styling does the `HintMessage` component apply? A: `HintMessage` is a styled `Text` that sets its color to `Colors.azure`, centers its text, and adds vertical margins to separate it from the button."}
{"text":"File: AddAttendance.js, Q: How does the component decide when to show the last checkout hint? A: It checks `lastTimeCheckIn` (from `currentLocation.lastActivity.localAttendanceDateTime`) and `checkingType === 1`; if both true, it renders `HintMessage` with a localized label and formatted time."}
{"text":"File: AddAttendance.js, Q: What translation keys does the success message use on check-in vs. check-out? A: It selects between `['MODAL_CHECKIN_SUCCESS_CONTENT','MODAL_CHECKIN_SUCCESS_CONTENT2']` for check-in and `['MODAL_CHECKOUT_SUCCESS_CONTENT','MODAL_CHECKOUT_SUCCESS_CONTENT2']` for check-out, then interpolates the tenant name and time."}
{"text":"File: AddAttendance.js, Q: How is the attendance timestamp generated in `onSubmit`? A: It uses `moment().format()` to produce the current date/time string in ISO format, assigning it to `attendanceDateTime` in the API params."}
{"text":"File: AddAttendance.js, Q: How does the component integrate react-hook-form for form handling? A: It calls `useCompatibleForm` to get `formMethods`, wraps the UI in `<FormProvider>`, and uses `formMethods.handleSubmit(onSubmit)` on the submit button to run validation and invoke `onSubmit`."}
{"text":"File: AddOrEditBooking.js, Q: What object defines the initial form values for AddOrEditBooking? A: The `initialValues` constant initializes fields: `amenityId`, `startEndDate`, `endDate`, `status` (with `statusCode: REQUESTED`), `paymentStatus` (with `paymentStatusCode: NOT_YET_DEPOSIT`), `purposeId`, `numberOfPerson`, `remark`, `bookingType`, `company`, `files`, `email`, `depositPrice`, and `slots`."}
{"text":"File: AddOrEditBooking.js, Q: How does the component determine if it's adding or editing a booking? A: It uses `useRoute()` to get `name`; if `name === 'addBooking'`, `isAddNew` is true; if `name === 'editBooking'`, `isEdit` is true."}
{"text":"File: AddOrEditBooking.js, Q: How is the booking ID obtained? A: From `useRoute().params?.id`, assigned to the constant `id`."}
{"text":"File: AddOrEditBooking.js, Q: What Yup schema validations are applied unconditionally? A: `bookingType` must be an array of allowed values and is required; `unit`, `company`, and `email` have conditional `.when` validations based on `bookingType`."}
{"text":"File: AddOrEditBooking.js, Q: How is conditional validation added for slots? A: If `isAddNew` is true, the schema adds a `slots` field requiring at least one item with `isCheck === true`."}
{"text":"File: AddOrEditBooking.js, Q: How is the form integrated with React Hook Form and Yup? A: `useCompatibleForm` is called with `defaultValues: initialValues` and a `resolver` from `useYupValidationResolver(validationSchema)`."}
{"text":"File: AddOrEditBooking.js, Q: Which methods are destructured from `formMethods`? A: `setValue`, `watch`, and other methods (like `handleSubmit`) are pulled from `formMethods` returned by `useCompatibleForm`."}
{"text":"File: AddOrEditBooking.js, Q: When does `getBookingDetail(id)` run? A: In a `useEffect` with `[id]` dependency, if `!isAddNew && id` is truthy, to load existing booking data."}
{"text":"File: AddOrEditBooking.js, Q: How are existing file attachments loaded into the form? A: A `useEffect` watching `referenceFiles.length` calls `setValue('files', referenceFiles)` when editing."}
{"text":"File: AddOrEditBooking.js, Q: How are booking rule files synced to the form? A: A `useEffect` with dependencies `[bookingRuleFiles, amenityDetail]` calls `setValue('bookingRuleFiles', bookingRuleFiles)`."}
{"text":"File: AddOrEditBooking.js, Q: What data is fetched on mount for lookups? A: `getBookingStatus()`, `getPaymentStatus()`, `getSimpleCompanies({page:1})`, `getBookingPurpose()`, and `getAmenities()` if `amenityList` is empty."}
{"text":"File: AddOrEditBooking.js, Q: How are default time slots populated for new bookings? A: A `useEffect` with `[bookingSlots]` dependency sets `slots` to `bookingSlots` when `isAddNew` is true."}
{"text":"File: AddOrEditBooking.js, Q: What does `getInitialValuesForUpdate()` return? A: It builds an object from `bookingDetail` to reset the form in edit mode, mapping fields like `amenityId`, `startDate`, `endDate`, `status`, `paymentStatus`, `purposeId`, `numberOfPerson`, `remark`, `bookingType`, `files`, and formatting `depositPrice`."}
{"text":"File: AddOrEditBooking.js, Q: How are occupier-specific fields populated in edit mode? A: If `bookingDetail.bookingType === bookingTargets.occupier`, `unit.fullUnitCode`, `contactName`, `contactEmail`, and `contactPhone` are set."}
{"text":"File: AddOrEditBooking.js, Q: How are company-specific fields populated in edit mode? A: If `bookingDetail.bookingType === bookingTargets.company`, a `company` object with `companyName` and `id` is set."}
{"text":"File: AddOrEditBooking.js, Q: How are outsider-specific fields populated in edit mode? A: If `bookingDetail.bookingType === bookingTargets.outsider`, the `email` field is set from `bookingDetail.email`."}
{"text":"File: AddOrEditBooking.js, Q: When does the form get reset with fetched data? A: In the `useEffect` watching `[bookingDetail, isAddNew]`, after getting amenity details and reference files, it calls `reset(getInitialValuesForUpdate())`."}
{"text":"File: AddOrEditBooking.js, Q: How is the form disabled for canceled or declined bookings? A: Inside the same `useEffect`, it checks `bookingDetail.status.statusCode`; if `CANCELED` or `DECLINED`, it sets `isDisabledForm` to true."}
{"text":"File: AddOrEditBooking.js, Q: How is the payment status initialized for new amenity selections? A: A `useEffect` watching `[amenityDetail]` calls `setValue('paymentStatus', {paymentStatusCode:'NotYetDeposit'})` if `amenityDetail.isUseDeposited`."}
{"text":"File: AddOrEditBooking.js, Q: When are time slots fetched? A: In a `useEffect` with `[startDate, endDate, amenityDetail]`, it calls `getAllTimeSlots` with the formatted date and `amenityId`."}
{"text":"File: AddOrEditBooking.js, Q: How is `calculateDepositPrice` implemented? A: It filters `slots` for checked ones, derives day name and times, finds a matching rule in `amenityDetail.amenityTimeRules`, and sets `depositPrice` via `setValue`."}
{"text":"File: AddOrEditBooking.js, Q: How is `calculateDepositPrice` invoked? A: In a `useEffect` with `[calculateDepositPrice]` dependency to recalc when slots change."}
{"text":"File: AddOrEditBooking.js, Q: What does `recurringBooking(values, bookingParams)` do? A: It builds a `bookingObj` without start/end dates, maps `rec.bookingTimes` into `bookingTimes`, calls `validateRecurringBooking`, then populates `bookingRequestData` and sets `confirmationVisible`."}
{"text":"File: AddOrEditBooking.js, Q: How are invalid recurring slots handled? A: The response’s `invalidSlots` array is stored in `bookingRequestData` for the confirmation modal."}
{"text":"File: AddOrEditBooking.js, Q: What triggers `handleConfirm()`? A: The user confirms recurrence in the modal, which calls `onSave(formMethods.getValues())` and hides the modal."}
{"text":"File: AddOrEditBooking.js, Q: How does `onSave(formValues)` build its payload? A: It filters `files` for items with `path`, determines `slotStartTime` and `slotEndTime` for new bookings, and constructs `payload` with `amenityId`, `startDate`, `endDate`, `status`, `bookingType`, `files`, and `paymentStatus` if needed."}
{"text":"File: AddOrEditBooking.js, Q: How are occupier payload fields added? A: If `bookingType===occupier`, it adds `buildingId`, `unitId`, `fullUnitId`, `userId`, `name`, `userName`, `phone`, `email`, and `emailAddress` from `formValues`."}
{"text":"File: AddOrEditBooking.js, Q: How are company payload fields added? A: If `bookingType===company`, it sets `companyId`, `name`, and `email` from `formValues.company`."}
{"text":"File: AddOrEditBooking.js, Q: How is outsider payload populated? A: If `bookingType===outsider`, it sets `payload.email = formValues.email`."}
{"text":"File: AddOrEditBooking.js, Q: How is recurrence integrated into the save flow? A: If `formValues.recurrence` exists, `recurringBooking(formValues,payload)` is awaited and the normal API call is skipped."}
{"text":"File: AddOrEditBooking.js, Q: How are `addBooking` and `updateBooking` differentiated? A: It calls `await addBooking(payload)` when `isAddNew`, otherwise `await updateBooking(payload)`."}
{"text":"File: AddOrEditBooking.js, Q: What happens after a successful add/update? A: It emits `DeviceEventEmitter.emit('UpdateListBooking')` and calls `navigation.goBack()`."}
{"text":"File: AddOrEditBooking.js, Q: How is the screen title determined? A: `getTitle()` returns `I18n.t('ADD_BOOKING')` or `I18n.t('EDIT_BOOKING')` based on `isAddNew`."}
{"text":"File: AddOrEditBooking.js, Q: How is `<SelectAmenityModal>` controlled? A: `visible={visibleSelectAmenity}`, `onClose={onCloseSelectAmenity}`, `onSelect={onAmenitySelect}`, and `data={amenityList}`."}
{"text":"File: AddOrEditBooking.js, Q: What does `onAmenitySelect(selectedAmenity)` do? A: It sets `amenityId`, calls `getAmenityDetail(selectedAmenity.amenityId)`, and hides the modal."}
{"text":"File: AddOrEditBooking.js, Q: How are bottom buttons configured in `BaseLayout`? A: It passes `bottomButtons` with a primary Save button calling `handleSubmit(onSave)` and disabled by `isDisabledForm`."}
{"text":"File: AddOrEditBooking.js, Q: How is the unit suggestion picker rendered? A: `<FormSuggestionPicker>` with `type=SuggestionTypes.UNIT`, `name=\"unit\"`, `keyword={unit?.fullUnitCode}`, `onChange` sets contact fields, `mode=\"small\"`, `label=\"OCCUPIER\"`, `required`."}
{"text":"File: AddOrEditBooking.js, Q: How is the company lazy dropdown rendered? A: `<FormLazyDropdown>` with `options={simpleCompanies}`, `getList={getSimpleCompanies}`, `fieldName=\"companyName\"`, `titleKey=\"companyName\"`, `name=\"company\"`, `label=\"COMPANY\"`, `mode=\"small\"`, `required`."}
{"text":"File: AddOrEditBooking.js, Q: How is the outsider email input rendered? A: `<FormInput>` with `testID=\"outsiderEmail\"`, `name=\"email\"`, `keyboardType=\"email-address\"`, `mode\"small\"`, `label=\"COMMON_EMAIL\"`, `required`."}
{"text":"File: AddOrEditBooking.js, Q: How is the booking purpose dropdown rendered? A: `<FormDropdown>` with `testID=\"bookingPurpose\"`, `name=\"purposeId\"`, `options={bookingPurposes}`, `mode=\"small\"`, `label=\"BK_PURPOSE\"`."}
{"text":"File: AddOrEditBooking.js, Q: How is the number-of-person input rendered? A: `<FormInput>` with `testID=\"numberOfPerson\"`, `name=\"numberOfPerson\"`, `keyboardType=\"number-pad\"`, `mode=\"small\"`, `label=\"BK_NEW_LIMIT_USER\"`."}
{"text":"File: AddOrEditBooking.js, Q: How is the remark input rendered? A: `<FormInput>` with `testID=\"remark\"`, `name=\"remark\"`, `multiline`, `mode=\"small\"`, `label=\"COMMON_DESCRIPTION\"`."}
{"text":"File: AddOrEditBooking.js, Q: How is the document picker rendered? A: `<FormDocumentPicker>` with `mode=\"small\"`, `testID=\"files\"`, `label=\"COMMON_DOCUMENT\"`, `name=\"files\"`."}
{"text":"File: AddOrEditBooking.js, Q: How are booking policy rules displayed? A: `<BookingPolicyRules>` is rendered inside a `<Container>` when `amenityDetail` exists, with props `amenityDetail` and `bookingRuleFiles`."}
{"text":"File: AddOrEditDelivery.js, Q: Which custom hook provides delivery data and actions? A: The component uses `useDelivery()`, which returns `deliveryDetail`, `types`, `listStatus`, `isLoading`, `addDelivery`, and `updateDelivery`."}
{"text":"File: AddOrEditDelivery.js, Q: Which custom hook handles file references for delivery? A: It uses `useFile()`, destructuring `getFileByReferenceId` and `file.referenceFiles` to manage uploaded images."}
{"text":"File: AddOrEditDelivery.js, Q: How is the form mode (add vs edit) determined? A: It checks `navigation.state.routeName === 'addDelivery'`; if true, `isAddNew` is true, else edit mode."}
{"text":"File: AddOrEditDelivery.js, Q: How is the `isReceived` flag computed? A: In edit mode, `isReceived` is true if `deliveryDetail.status.id === ParcelStatus.RECEIVED`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the API method chosen for submission? A: It assigns `submitRequest = isAddNew ? addDelivery : updateDelivery`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the screen title set? A: The `title` constant is `I18n.t('DL_ADD')` when adding, or `I18n.t('DL_EDIT')` when editing."}
{"text":"File: AddOrEditDelivery.js, Q: Where does the validation message text come from? A: It uses `I18n.t('FORM_THIS_FIELD_IS_REQUIRED')` assigned to `requiredMessage`."}
{"text":"File: AddOrEditDelivery.js, Q: Which fields are required by the Yup schema? A: `deliveryTypeId`, `statusId`, `deliveryText`, `contactName`, and `unit` (non-null object) are required."}
{"text":"File: AddOrEditDelivery.js, Q: How does the schema enforce the `unit` field? A: It declares `unit` as `Yup.object().nullable().required(requiredMessage)` to ensure a selection."}
{"text":"File: AddOrEditDelivery.js, Q: What happens when a QR code scan returns no result? A: `onReceiveCode` calls `modal.showError(I18n.t('QRCODE_INCORRECT_CONTENT'))`."}
{"text":"File: AddOrEditDelivery.js, Q: How does the QR scanner get launched? A: `onScanQRPress` navigates to `scanQRCode` with a callback to `onReceiveCode` via `NavigationService.navigate`."}
{"text":"File: AddOrEditDelivery.js, Q: Which parameters are extracted in `onSubmit`? A: It destructures `{ unit, residentUser, images, transportService, ...values }` from form values."}
{"text":"File: AddOrEditDelivery.js, Q: How is the `params` object built for API calls? A: It spreads `values` and adds `fullUnitCode`, `unitId`, `residentId`, `transportServiceId`, `deliveryUserName`, and `residentUser`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the check-out flow triggered? A: If `isCheckOutRef.current` is true, `onSubmit` navigates to `'checkOutDelivery'` instead of calling `submitRequest`."}
{"text":"File: AddOrEditDelivery.js, Q: How are image files uploaded after save? A: It filters `images` for items with `path` and calls `RequestApi.requestUploadFileDelivery(guid, uploadImages)`."}
{"text":"File: AddOrEditDelivery.js, Q: Which event is emitted upon successful save? A: It emits `DeviceEventEmitter.emit('UpdateListDelivery', 1)`."}
{"text":"File: AddOrEditDelivery.js, Q: How does `getInitialValuesForUpdate` populate the form in edit mode? A: It extracts `deliveryDetail`, calls `getFileByReferenceId`, parses `creationTime`, sets `residentUser`, `unit`, `contactName`, `contactPhone`, `contactEmail`, `receiver`, and initializes `images` as empty."}
{"text":"File: AddOrEditDelivery.js, Q: What is the purpose of `getFileByReferenceId(deliveryDetail.guid)`? A: It loads existing file references so they can be displayed in the form via `referenceFiles`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the primary Save button configured? A: In `bottomButtons`, it has `title:'AD_COMMON_SAVE'`, `type:'primary'`, `permission:!isAddNew && 'Deliveries.Update'`, and onPress resets `isCheckOutRef` and submits the form."}
{"text":"File: AddOrEditDelivery.js, Q: Under what conditions is the Save Received button shown? A: If `isGranted('Deliveries.Update')`, not adding new, and `deliveryDetail.status.id !== ParcelStatus.RECEIVED`, it pushes an info-type button to toggle check-out."}
{"text":"File: AddOrEditDelivery.js, Q: How are `bottomButtons` passed to the layout? A: They are included in `baseLayoutProps.bottomButtons` when rendering `<BaseLayout>`."}
{"text":"File: AddOrEditDelivery.js, Q: How is `useCompatibleForm` initialized? A: It’s called with `defaultValues` (fields set to undefined, `unit:null`, `images:[]`) and `resolver: useYupValidationResolver(validationSchema)`."}
{"text":"File: AddOrEditDelivery.js, Q: Which properties from `formMethods` are used in render? A: It destructures `values` and `setFieldValue` from `formMethods`."}
{"text":"File: AddOrEditDelivery.js, Q: When does the form reset with fetched data? A: In a `useEffect` watching `[deliveryDetail]`, it calls `formMethods.reset(getInitialValuesForUpdate())`."}
{"text":"File: AddOrEditDelivery.js, Q: How are image references bound to the form? A: A `useEffect` watching `referenceFiles.length` calls `setFieldValue('images', referenceFiles)`."}
{"text":"File: AddOrEditDelivery.js, Q: What props are passed to `BaseLayout`? A: `title`, `showBell:false`, `containerStyle:{paddingHorizontal:15}`, `loading:isLoading`, `bottomButtons`, and optionally `displayPlaceholder`."}
{"text":"File: AddOrEditDelivery.js, Q: How does the component render a placeholder before data loads? A: If `!deliveryDetail && !isAddNew`, it returns `<BaseLayout displayPlaceholder />` early."}
{"text":"File: AddOrEditDelivery.js, Q: How is the `signature` retrieved? A: It’s `_.get(deliveryDetail, 'signature')` when not adding new."}
{"text":"File: AddOrEditDelivery.js, Q: How are status options filtered for add mode? A: It filters out `ParcelStatus.RECEIVED` from `listStatus` to create `statusWithOutReceived`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the `status` array chosen? A: If adding or not yet received, `status = statusWithOutReceived`; once received, `status = listStatus`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the current `unit` value obtained? A: It calls `formMethods.watch('unit')` and assigns it to the `unit` constant."}
{"text":"File: AddOrEditDelivery.js, Q: How is the delivery type dropdown configured? A: `<FormDropdown required disabled={isReceived} options={types} label='AD_DL_TITLE_TYPE' name='deliveryTypeId' />`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the status dropdown configured? A: `<FormDropdown required disabled={isReceived} options={status} label='COMMON_STATUS' name='statusId' />`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the description input rendered? A: `<FormInput required editable={!isReceived} label='AD_DL_TITLE_DESCRIPTION' name='deliveryText' multiline />`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the unit selector rendered? A: Inside a `<Box title='AD_CRWO_TITLE_INFO'>`, `<FormSuggestionPicker required disabled={isReceived||!isAddNew} name='unit' type={SuggestionTypes.LIST_UNIT_V2} />`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the resident user selector rendered? A: `<FormSuggestionPicker required key='residentUser' disabled={isReceived||!unit||!isAddNew} type={SuggestionTypes.DELIVERY_USERS} onChange={...} />`."}
{"text":"File: AddOrEditDelivery.js, Q: How are read-only contact fields rendered? A: Using the `ContactInput` styled component for `contactEmail` and `contactPhone` with props `editable=false`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the transport service selector rendered? A: `<FormSuggestionPicker disabled={isReceived} type={SuggestionTypes.TRANSPORT_SERVICE} name='transportService' />`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the tracking number input enhanced? A: It includes `rightIcon={<IconButton name='barcode-outline' onPress={onScanQRPress}/>} `."}
{"text":"File: AddOrEditDelivery.js, Q: How is the image picker rendered? A: `<FormDocumentPicker disabled={isReceived} name='images' label='COMMON_IMAGES' />`."}
{"text":"File: AddOrEditDelivery.js, Q: How are receiver details displayed? A: If `values.receiver` exists, a `<Box>` renders `<ContactInput>` fields for `receiver.residentName`, `residentEmail`, `residentPhone`, and `receiveNote`."}
{"text":"File: AddOrEditDelivery.js, Q: How is the `Signature` component embedded? A: Inside a disabled `<TouchableOpacity>` within a `<Box title='AD_DELIVERY_SIGNATURE_TITLE'>` when `signature` is truthy."}
{"text":"File: AddOrEditDelivery.js, Q: How is the creation time displayed? A: `<FormDate required disabled name='creationTime' mode='datetime' label='AD_DL_DETAIL_CREATE_DAY' />` when editing."}
{"text":"File: AddOrEditDelivery.js, Q: Which utility parses the creation timestamp? A: `parseDate(creationTime)` from `../../../Utils/transformData`."}
{"text":"File: AddOrEditDelivery.js, Q: How does the onChange handler populate contact fields? A: The `residentUser` picker’s `onChange` calls `setFieldValue` for `contactName`, `contactPhone`, and `contactEmail`."}
{"text":"File: AddOrEditDelivery.js, Q: How is permission checked before showing Save Received? A: It calls `isGranted('Deliveries.Update')` imported from `PermissionConfig`."}
{"text":"File: AddOrEditDelivery.js, Q: How are lodash utilities used? A: It uses `_.get` for safe property access and `_.first` to select the first `deliveryReceivement` entry."}
{"text":"File: AddOrEditDelivery.js, Q: How is the form context provided? A: The entire form is wrapped in `<FormProvider {...formMethods}>`."}
{"text":"File: AddOrEditDelivery.js, Q: How is scrolling handled? A: Inputs are enclosed in `<AwareScrollView>` to adjust for keyboard and safe areas."}
{"text":"File: AddOrEditDelivery.js, Q: How is loading state displayed? A: `BaseLayout` receives `loading:isLoading` to show a spinner overlay while data fetches."}
{"text":"File: AddOrEditDelivery.js, Q: How does the layout adjust padding? A: `containerStyle:{paddingHorizontal:15}` is passed to `BaseLayout`."}
{"text":"File: AddOrEditDelivery.js, Q: What pattern is used for bottom button actions? A: Each button object has `title`, `type`, optional `permission`, and `onPress` callback."}
{"text":"File: AddOrEditDelivery.js, Q: How is the `isCheckOutRef` ref used? A: It toggles between add vs check-out mode before form submission to branch logic in `onSubmit`."}
{"text":"File: AddOrEditDelivery.js, Q: Why is `images` defaulted to an empty array? A: To ensure the document picker and upload logic always have an array to work with, even if no files are present."}
{"text":"File: AddOrEditDelivery.js, Q: How does the component ensure proper form resetting? A: It calls `formMethods.reset(...)` inside a `useEffect` when `deliveryDetail` changes."}
{"text":"File: AddOrEditDelivery.js, Q: How are Dropdown placeholders handled? A: Each `<FormDropdown>` passes an empty `placeholder` prop to disable default text."}
{"text":"File: AddOrEditDelivery.js, Q: How is the delivery text input limited? A: It’s a multiline `<FormInput>` without explicit max length—validation relies on required status only."}
{"text":"File: AddOrEditDelivery.js, Q: How are translation keys applied to labels? A: Label props (e.g. `label='AD_DL_TITLE_TYPE'`) reference I18n keys which are translated in the UI."}
{"text":"File: AddOrEditDelivery.js, Q: When is `getFileByReferenceId` called relative to form reset? A: It’s invoked in `getInitialValuesForUpdate`, before the form reset effect runs."}
{"text":"File: AddOrEditDelivery.js, Q: How is the Box component styled? A: It groups related inputs (unit/resident or receiver note) with a title and optional `required` flag."}
{"text":"File: AddOrEditFeedback/index.js, Q: Which React Hook Form hook is used to create the form? A: It uses `useForm` from `react-hook-form` with a Yup resolver to handle form state and validation."}
{"text":"File: AddOrEditFeedback/index.js, Q: Which Yup schema validations are applied? A: `unit` must pass a non-empty object test, `description` is required, `commentBoxStatus` and `commentBoxCategoryId` and `commentBoxTypeId` are required, and `commentBoxSourceId` is optional."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are form default values defined? A: `defaultValues` sets `id`, `commentBoxTypeId`, `commentBoxCategoryId`, `commentBoxSourceId` to `undefined`, `unit` and `location` to `{}`, `commentBoxStatus` to `''`, `images` to `[]`, and `description` to `''`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is edit mode determined? A: It checks `navigation.state.routeName === 'addFeedback'` to set `isAddNew`—false means edit mode."}
{"text":"File: AddOrEditFeedback/index.js, Q: What API actions are used for submission? A: `addFB` for add mode and `editFB` for edit mode, assigned to `submitRequest`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the detail fetched on mount? A: In `useEffect`, if not adding, it calls `detailFB(id)`; it also always calls `getFeedbackStatus()`, `getTypes()`, `getCategories()`, and `getSources()`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are fetched files integrated into the form? A: A `useEffect` watches `fileUrls.length` and calls `setValue('images', fileUrls)` on changes."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the navigation parameter `id` retrieved? A: It calls `navigation.getParam('id')` to get the feedback ID for editing."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the screen title localized? A: It sets `title = isAddNew ? I18n.t('FEEDBACK_ADD') : I18n.t('FEEDBACK_EDIT')` for the header."}
{"text":"File: AddOrEditFeedback/index.js, Q: What base layout props are passed to `BaseLayout`? A: `title`, `showBell:false`, `containerStyle:{paddingHorizontal:15}`, `loading:isLoading`, and `bottomButtons` with a save button."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is placeholder mode triggered? A: If `!fbDetail && !isAddNew`, the component returns `<BaseLayout displayPlaceholder />` immediately."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are dropdown fields rendered? A: It renders `FormDropdown` components for `commentBoxStatus`, `commentBoxTypeId`, `commentBoxCategoryId`, and `commentBoxSourceId`."}
{"text":"File: AddOrEditFeedback/index.js, Q: What props configure the status dropdown? A: `required`, `options={statusList}`, `valKey='name'`, `showValue=false`, and `name='commentBoxStatus'`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the type dropdown rendered? A: `<FormDropdown required options={types} label='COMMON_TYPE' name='commentBoxTypeId' />`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the category dropdown rendered? A: `<FormDropdown required options={categories} label='COMMON_CATEGORY' name='commentBoxCategoryId' />`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the source dropdown rendered? A: `<FormDropdown options={sources} label='FEEDBACK_SOURCE' name='commentBoxSourceId' />`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the location picker rendered? A: `<FormSuggestionPicker type={SuggestionTypes.LOCATION} label='COMMON_LOCATION' name='location' />`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the unit locator rendered? A: `<FormSuggestionPicker required name='unit' disabled={!isAddNew} keyword={unit.fullUnitCode} onChange={...} />`."}
{"text":"File: AddOrEditFeedback/index.js, Q: What happens when a unit is selected? A: `onChange` of unit picker calls `setValue` for `userName`, `phoneNumber`, and `emailAddress` from the selected unit."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the contact info section structured? A: Inside a `<Box title='CONTACT_INFORMATION'>`, it shows three read-only `<FormInput>`s for `userName`, `emailAddress`, and `phoneNumber`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the description input configured? A: `<FormInput maxLength={1000} showCharacterCount required multiline name='description' />` to enforce length and show counter."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are attachments handled? A: `<FormDocumentPicker name='images' label='COMMON_IMAGES' />` binds the `images` field to a document picker."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are related work orders linked? A: In edit mode, it maps `fbDetail.workOrderIds` to `<ButtonLink onPressJR={id}>` elements that call `onPressJR(item)`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How does `onPressJR` navigate? A: It calls `NavigationService.navigate('editJobRequest', { id: jrId })` to open the job request screen."}
{"text":"File: AddOrEditFeedback/index.js, Q: When is `FloatingConversation` rendered? A: In edit mode, after the form, with props `title=fbDetail.id`, `moduleId=Modules.FEEDBACK`, and `guid=fbDetail.guid`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the save button configured for permissions? A: In `bottomButtons`, the save button has `permission: !isAddNew && 'Feedbacks.Update'` so editing requires update permission."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are form methods provided to child components? A: The form is wrapped in `<FormProvider {...formMethods}>` so each input can access `react-hook-form` context."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is `getInitialValuesForUpdate` used? A: In a `useEffect` watching `fbDetail`, it calls `formMethods.reset(getInitialValuesForUpdate())` to populate edit values."}
{"text":"File: AddOrEditFeedback/index.js, Q: What does `getInitialValuesForUpdate` return? A: It returns an object merging `fbDetail` fields, `unit.fullUnitCode`, dropdown IDs, and calls `getFileReference(guid)`, setting `images:[]`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is `getFileReference` used? A: In `getInitialValuesForUpdate`, it’s called with `fbDetail.guid` to load existing file URLs."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is `fileUrls` obtained? A: From `useFile().file.fileUrls` to track URLs of files uploaded or retrieved."}
{"text":"File: AddOrEditFeedback/index.js, Q: How does the Yup schema validate the `unit` field? A: It uses `Yup.object().test('unit', requiredMessage, value => _.size(value))` to ensure it’s non-empty."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the validation resolver created? A: It uses `useYupValidationResolver(validationSchema)` to convert Yup rules into RHF errors."}
{"text":"File: AddOrEditFeedback/index.js, Q: Why is `location` defaulted to `{}`? A: To provide a default object so the location picker can bind safely even if no value is selected."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are navigation and events used in onSubmit? A: After successful API, it calls `NavigationService.goBack()` and `DeviceEventEmitter.emit('UpdateListFeedback',1)`."}
{"text":"File: AddOrEditFeedback/index.js, Q: What parameters does `submitRequest` expect? A: It expects an object `{ params, files }` where `files` are filtered images with `path`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are upload images filtered? A: It does `images.filter(item => item.path)` to only upload newly selected files."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the feedback status code mapped? A: It destructures `commentBoxStatus:{statusCode}` and builds `commentBoxStatusCode:'FEEDBACK_'+statusCode` in `commonParams`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are building and unit IDs extracted? A: From `unit.buildingId`/`unit.unitId` or fallback to `fbDetail.buildingId`/`fbDetail.unitId`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How does edit mode handle `guid` and `commentBoxId`? A: In edit block of `onSubmit`, it includes `commentBoxId` and `guid:fbDetail.guid` in `params`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is `commentBoxNature` handled on edit? A: It reads `commentBoxNature.code` into `params.commentBoxNature` when editing."}
{"text":"File: AddOrEditFeedback/index.js, Q: What does `...values` spread include? A: It includes any remaining form fields not destructured (e.g. `location`, extra metadata) into the `params` object."}
{"text":"File: AddOrEditFeedback/index.js, Q: Why is `fileUrls` length used as a dependency? A: To update `images` field whenever the list of fetched file URLs changes after reference load."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are `statusList`, `types`, `categories`, and `sources` populated? A: They come from `useFeedback()` context and are fetched on mount via respective `get*` functions."}
{"text":"File: AddOrEditFeedback/index.js, Q: How does the form support both add and edit flows? A: It uses `isAddNew` flag to branch fetching logic, initial values, submission API, and disable state of unit picker."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is `description` reset on new vs edit? A: Default is empty string; on edit, `getInitialValuesForUpdate` spreads `restDetail.description` into default values."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are styling wrappers used? A: `<AwareScrollView>` wraps inputs to handle keyboard and safe areas; `<Box>` groups related inputs with titles."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are test IDs used? A: There are none in this file; testing relies on `name` props and component tree structure instead."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is lodash used? A: It uses `_.get` for safe property access, `_.size` to test object non-emptiness, and `_.first` to pick the first work order ID."}
{"text":"File: AddOrEditFeedback/index.js, Q: How are translation keys passed to buttons? A: In `FloatingConversation`, the button text is determined internally; link buttons use `I18n.t('JR_LINK_FEEDBACK', undefined, item)`."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is the JR link text localized? A: Via `<TextJR text={I18n.t('JR_LINK_FEEDBACK', undefined, item)} />`, injecting the work order ID."}
{"text":"File: AddOrEditFeedback/index.js, Q: How does the component ensure idempotent file loading? A: `useEffect` with `[fileUrls.length]` only resets `images` when the number of URLs changes, avoiding redundant sets."}
{"text":"File: AddOrEditFeedback/index.js, Q: How is `useYupValidationResolver` implemented under the hood? A: It wraps Yup validation to produce a resolver function compatible with RHF’s `resolver` option."}
{"text":"File: EditQRFeedback.js, Q: Which form library hook is used to manage form state and validation? A: It uses `useForm` from `react-hook-form` with a Yup resolver generated by `useYupValidationResolver(validationSchema)`."}
{"text":"File: EditQRFeedback.js, Q: How are default values for the form defined? A: In `useForm`, `defaultValues` sets `statusId` and `divisionId` to `undefined`, `commentBoxLocation` to `{}`, and `images` to `[]`."}
{"text":"File: EditQRFeedback.js, Q: What Yup validation is applied? A: Only `statusId` is required and must be a number: `Yup.number().required(requiredMessage)`."}
{"text":"File: EditQRFeedback.js, Q: How is the localized required error message obtained? A: It calls `I18n.t('FORM_THIS_FIELD_IS_REQUIRED')` and stores it in `requiredMessage`."}
{"text":"File: EditQRFeedback.js, Q: How does the component load initial data on mount? A: In a `useEffect`, it calls `detailQRFeedback(id)`, `getFeedbackStatus()`, `getFeedbackDivision()`, and `getQrFeedbackSetting()`."}
{"text":"File: EditQRFeedback.js, Q: How is the feedback ID retrieved from navigation? A: It calls `navigation.getParam('id')` to get `id`."}
{"text":"File: EditQRFeedback.js, Q: Which API function handles the form submission? A: `submitRequest` is set to `editQrFB` from the `useFeedback` hook."}
{"text":"File: EditQRFeedback.js, Q: What happens in `onSubmit`? A: It destructures `statusId` and `divisionId`, builds `params = { id, statusId, divisionId }`, calls `submitRequest(params)`, then on success calls `NavigationService.goBack()` and `DeviceEventEmitter.emit('UpdateListFeedback',1)`."}
{"text":"File: EditQRFeedback.js, Q: How are existing attachments synced into the form? A: A `useEffect` watching `fileUrls.length` calls `setValue('images', fileUrls)` whenever `fileUrls` change."}
{"text":"File: EditQRFeedback.js, Q: What hook provides `fileUrls` and `getFileReference`? A: The `useFile` hook returns `getFileReference` and `file.fileUrls` for managing file attachments."}
{"text":"File: EditQRFeedback.js, Q: How are initial edit values loaded into the form? A: In `getInitialValuesForUpdate`, it destructures `guid`, `commentBoxStatusId`, `commentBoxDivisionId`, and `commentBoxLocation` from `qrFBDetail`, calls `getFileReference(guid)`, and returns an object with those mapped to `statusId`, `divisionId`, `commentBoxLocation`, and `images:[]`."}
{"text":"File: EditQRFeedback.js, Q: When does `formMethods.reset` run? A: A `useEffect` watching `qrFBDetail` calls `formMethods.reset(getInitialValuesForUpdate())` once the detail is available."}
{"text":"File: EditQRFeedback.js, Q: How is the base layout configured? A: `baseLayoutProps` includes `title`, `showBell:false`, `containerStyle:{paddingHorizontal:15}`, `loading:isLoading`, and `bottomButtons` with a save button requiring permission `Feedbacks.Update`."}
{"text":"File: EditQRFeedback.js, Q: How is placeholder mode triggered? A: If `qrFBDetail` is falsy, the component returns `<BaseLayout {...baseLayoutProps} displayPlaceholder />` immediately."}
{"text":"File: EditQRFeedback.js, Q: How is the screen title set? A: `title` is always `I18n.t('FEEDBACK_QR_EDIT')` to localize the QR feedback edit screen title."}
{"text":"File: EditQRFeedback.js, Q: How is the contact information section rendered? A: Inside `<Box title='CONTACT_INFORMATION'>`, three `<FormInput>`s display `fullName`, `emailAddress`, and `phoneNumber` from `qrFBDetail`, all read-only (`editable={false}`) and `mode='small'`."}
{"text":"File: EditQRFeedback.js, Q: How is the division dropdown rendered conditionally? A: It renders `<FormDropdown options={divisionList} label='DIVISION' name='divisionId' />` only if `qrFeedbackSetting?.canViewDivision` is true."}
{"text":"File: EditQRFeedback.js, Q: How is the status dropdown configured? A: `<FormDropdown required options={statusList} label='COMMON_STATUS' name='statusId' />` makes it mandatory to select a status."}
{"text":"File: EditQRFeedback.js, Q: How is the type field displayed? A: `<FormDropdown disabled defaultTitle={qrFBDetail.commentBoxType.name} label='COMMON_TYPE' name='commentBoxTypeId' />` shows the feedback type read-only."}
{"text":"File: EditQRFeedback.js, Q: How is location displayed? A: `<FormSuggestionPicker disabled required type={SuggestionTypes.LOCATION} name='commentBoxLocation' />` shows the selected location read-only."}
{"text":"File: EditQRFeedback.js, Q: How is the description shown? A: `<FormInput editable={false} value={qrFBDetail.description} required multiline name='description' />` shows the feedback text read-only."}
{"text":"File: EditQRFeedback.js, Q: How are attachment controls rendered? A: `<FormDocumentPicker disabled name='images' label='COMMON_IMAGES' />` displays attached files in read-only mode."}
{"text":"File: EditQRFeedback.js, Q: How are related work orders linked? A: It maps `qrFBDetail.workOrderIds` to `<ButtonLink onPressJR={item}>` elements that display `${I18n.t('JR_LINK_FEEDBACK', undefined, item)}`."}
{"text":"File: EditQRFeedback.js, Q: How does `onPressJR` navigate? A: It calls `NavigationService.navigate('editJobRequest',{id:jrId})` to open the job request detail screen."}
{"text":"File: EditQRFeedback.js, Q: How are form methods supplied to inputs? A: The form is wrapped in `<FormProvider {...formMethods}>` so each input can register with `react-hook-form`."}
{"text":"File: EditQRFeedback.js, Q: Why is the type dropdown disabled? A: The feedback type is immutable in QR edit mode, so the dropdown is disabled to prevent changes."}
{"text":"File: EditQRFeedback.js, Q: How is the required flag applied? A: Inputs like status, type, location, and description include `required` prop to indicate mandatory fields."}
{"text":"File: EditQRFeedback.js, Q: How is the `divisionId` field validated? A: It has no validation schema entry, so it’s optional in the form submission."}
{"text":"File: EditQRFeedback.js, Q: How is `getQrFeedbackSetting` used? A: It’s called on mount to retrieve settings such as whether to show the division field."}
{"text":"File: EditQRFeedback.js, Q: Which UI component ensures keyboard awareness? A: `<AwareScrollView>` wraps the form fields to adjust for the keyboard and safe area."}
{"text":"File: EditQRFeedback.js, Q: How are styled components used? A: `TextJR` styles `<Text>` with blue color; `ButtonLink` styles `<Button>` with `margin-bottom:12px` for spacing."}
{"text":"File: EditQRFeedback.js, Q: How is `useYupValidationResolver` integrated? A: It wraps the Yup schema to produce a resolver function passed to `useForm({ resolver })`."}
{"text":"File: EditQRFeedback.js, Q: How are file URLs loaded on initial values? A: `getInitialValuesForUpdate` calls `getFileReference(guid)` to fetch attachments, and the effect syncs `fileUrls` into form state."}
{"text":"File: EditQRFeedback.js, Q: What event is emitted after save? A: `DeviceEventEmitter.emit('UpdateListFeedback',1)` notifies parent lists to refresh."}
{"text":"File: EditQRFeedback.js, Q: How are loading states handled? A: `BaseLayout` receives `loading:isLoading` to show a spinner while data is fetched."}
{"text":"File: EditQRFeedback.js, Q: What is the purpose of `commentBoxLocation` default? A: It ensures the SuggestionPicker has an object to bind even before data arrives."}
{"text":"File: EditQRFeedback.js, Q: How does the form handle missing detail data? A: It returns the placeholder layout if `qrFBDetail` is not yet loaded, preventing errors."}
{"text":"File: EditQRFeedback.js, Q: How is `divisionList` populated? A: It comes from `useFeedback().divisionList`, loaded by `getFeedbackDivision()` on mount."}
{"text":"File: EditQRFeedback.js, Q: How are navigation props used? A: The `navigation` prop is used to retrieve the `id` param and to navigate on save or JR link click."}
{"text":"File: EditQRFeedback.js, Q: Why does the component always show the save button? A: Edit mode always provides a save action, controlled via `bottomButtons` in `BaseLayout`."}
{"text":"File: EditQRFeedback.js, Q: What permission is required for saving? A: The save button has `permission:'Feedbacks.Update'`, enforced by `BaseLayout` to restrict access."}
{"text":"File: EditQRFeedback.js, Q: How is the `statusList` passed to the dropdown? A: It passes `options={statusList}` and `name='statusId'` to `<FormDropdown>` so status codes are selectable."}
{"text":"File: EditQRFeedback.js, Q: How is the division dropdown label localized? A: It uses `label='DIVISION'`, which is a translation key passed to `I18n.t` by `FormDropdown`."}
{"text":"File: EditQRFeedback.js, Q: How are empty form values handled? A: Default values ensure empty fields don’t cause uncontrolled-to-controlled warnings."}
{"text":"File: EditQRFeedback.js, Q: How are nested form values reset? A: `formMethods.reset()` replaces the entire form state with new initial values when details arrive."}
{"text":"File: EditQRFeedback.js, Q: How is the `divisionId` dropdown disabled? A: It’s always enabled if `canViewDivision` is true; there’s no `disabled` prop on it."}
{"text":"File: EditQRFeedback.js, Q: Why is the description field read-only? A: QR feedback descriptions cannot be modified during QR edit, so it’s set `editable={false}`."}
{"text":"File: EditQRFeedback.js, Q: How are code and UI separated? A: Logic (effects, form) sits in the component; presentation uses shared `Form*` components and styled wrappers."}
{"text":"File: EditQRFeedback.js, Q: What ensures consistent spacing? A: `containerStyle:{paddingHorizontal:15}` on `BaseLayout` and `margin-bottom` on `ButtonLink` enforce layout padding."}
{"text":"File: EditQRFeedback.js, Q: How is the QR feedback type displayed? A: It’s shown in a disabled dropdown with `defaultTitle={qrFBDetail.commentBoxType.name}` and no `options` needed."}
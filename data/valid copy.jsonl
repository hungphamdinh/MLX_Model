{"text":"File: AddOrEditAsset/DetailTab.js, Q: What does the defaultValues object initialize in DetailTab? A: It sets initial values for many fields including assetName, assetCode, assetType (null), purchasedDate (null), price (object with text and rawValue), serialNumber, warrantDate, description, companyCode, companyName, companyAddress, companyPhone, code, unitLocation, inventoryBrand (null), locationType ([1] by default), a reminder object (with emails array, isActive flag, users array and reminderDay), files (empty array), assetCreationTime and model."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Which fields are marked as required in the Yup validation schema? A: The schema requires assetName and description as non-empty strings and assetType as a non-null object."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is the isIMT boolean computed and what does it represent? A: It’s true when editing (!isAddNew) and assetDetail.referenceId has length > 0, indicating an imported asset with some disabled fields."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What value is assigned to the price field by default? A: { text: '0', rawValue: 0 } (zero cost in both display and numeric form)."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are asset types loaded into the form? A: On mount useAsset().getAssetTypes({page:1,keyword:''}) and then again via FormLazyDropdown on scroll/search."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are employees retrieved for the reminder dropdown? A: The parent screen calls getEmployees() and FormLazyDropdown passes that callback to load more on scroll/search."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What role does the useFile hook play in DetailTab? A: It provides getFileReference, resetFiles on unmount, and fileUrls which sync into the form’s files field."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does getInitialValueForUpdate construct initial form values for editing? A: It maps assetDetail into form fields, parsing dates, splitting company details, formatting price, converting reminders, and wrapping locationType in an array."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What parameters are passed to the API when submitting the form? A: Spreads form values, then overrides locationId, unitId, first locationType, price.rawValue, companyId, assetTypeId, inventoryBrandId, and reminder userIds/minutes."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does addEmailAndResetInput update the reminder emails? A: It appends watch('userEmail') to reminder.emails via setValue, then clears userEmail."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What does the removeEmail function do? A: It filters out the email at the given index from reminder.emails and updates the form field with the new array."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does onCheckEmail validate and add an email? A: It reads userEmail, validates with validateEmail, shows an error modal if invalid, otherwise calls addEmailAndResetInput."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What options are provided for locationTypes and how are they used? A: Two options: unit location (value 1) and common location (value 0), passed to FormRadioGroup to choose locationType."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does getDefaultEmployees build the display title for the employee dropdown? A: It maps each reminder user’s displayName and joins with commas, returning an empty string if none."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Which useEffect fetches asset types on mount? A: An effect with empty deps calls getAssetTypes({page:1,keyword:''}) on component mount."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the component handle updates to uploaded files? A: A useEffect watches fileUrls.length; when nonzero, it sets form field files to fileUrls; cleanup resets files on unmount."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: When does the form reset to updated values? A: A useEffect listening to assetDetail calls formMethods.reset(getInitialValueForUpdate()) whenever assetDetail changes."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What utility functions handle date conversions for reminders? A: minutesToDays converts reminderInMinutes to reminderDay, and daysToMinutes converts back before submission."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is the price represented in the form and converted for submission? A: As {text,rawValue}; the rawValue numeric is sent to the API."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What company fields become read-only inputs after selection? A: companyCode, companyAddress and companyPhone are populated and rendered with editable={false}."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Which additional fields are shown only when editing an asset? A: TextBox for active/inactive status and a read-only asset code input under the info section when !isAddNew."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What controls whether the reminder inputs are visible? A: A FormSwitch bound to reminder.isActive toggles visibility of reminder fields when on."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the form change when qrFeedbackSetting.isEmbedExternalWebsite is true? A: It renders a simplified view with only name, code, creation time, locationType and suggestion pickers, omitting brand, price and reminder."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Under what condition is the save button rendered? A: Only if readOnly is false; it calls formMethods.handleSubmit(onSubmit) and labels with I18n.t('AD_COMMON_SAVE')."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the component decide whether to show a unit or location selector? A: It checks the first element of locationType array: AssetLocationType.Unit shows unit picker, else location picker."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What is the purpose of FormDisabledProvider in DetailTab? A: It disables all form inputs when disabled prop is true (based on readOnly), preventing edits."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the reminder section allow removing an email? A: Each email is rendered with ItemUserEmail passing onPressRemove that calls removeEmail(index)."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are date fields such as purchasedDate, warrantDate and assetCreationTime represented? A: Using FormDate mode=\"date\"; purchased and warrant editable unless disabled, creationTime always disabled."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What happens after a successful submission? A: onSubmit awaits submitRequest; on success NavigationService.goBack() and DeviceEventEmitter.emit('ReloadAsset')."}
{"text":"File: AddOrEditAsset.js, Q: How does the component determine whether it is adding a new asset or editing? A: It checks navigation.state.routeName !== 'detailAssets' to set isAddNew."}
{"text":"File: AddOrEditAsset.js, Q: What data is provided by the useAsset hook? A: assetDetail state and actions getAssetDetail(id) and resetAssetDetail()."}
{"text":"File: AddOrEditAsset.js, Q: Why does the component call getEmployees from useUser? A: To fetch employees on mount for the reminder dropdown in DetailTab."}
{"text":"File: AddOrEditAsset.js, Q: What purpose does the tabIndex state serve? A: Tracks selected tab, determining which content (Detail, PM history, JR history, plan list, inspection history) to render."}
{"text":"File: AddOrEditAsset.js, Q: How is the array of tab labels defined and what do they represent? A: ['AD_ASSETS_TAB_DETAIL','PM_HISTORY','JR_HISTORY','AD_ASSETS_TAB_LIST','INSPECTION_HISTORY'] mapping to detail, preventive, job request, plan list, inspection."}
{"text":"File: AddOrEditAsset.js, Q: What does otherModule represent and how is it determined? A: assetDetail?.moduleId; indicates origin module to restrict editing and adjust tabs if from Work Order or Plan Maintenance."}
{"text":"File: AddOrEditAsset.js, Q: How does tabValues decide which tabs to show? A: isAddNew returns only detail; WORKORDER shows JR_HISTORY & detail; PLANMAINTENANCE shows list & detail; else all except list."}
{"text":"File: AddOrEditAsset.js, Q: What component does getListFromOther return for Work Order versus Plan Maintenance? A: WORKORDER returns <JobRequestHistory/>, otherwise <MaintenancePlan/>."}
{"text":"File: AddOrEditAsset.js, Q: How does getListFromAsset choose which list to render? A: tabIndex 2 → JobRequestHistory; 3 → InspectionHistory; else MaintenancePlan isHistory."}
{"text":"File: AddOrEditAsset.js, Q: What happens when the user switches tabs? A: onTabChange updates tabIndex, causing re-render of the corresponding component."}
{"text":"File: AddOrEditAsset.js, Q: How does getSegments structure the tab view? A: Wraps a SegmentControl inside SegmentWrapper and renders child component below; control is horizontally scrollable."}
{"text":"File: AddOrEditAsset.js, Q: What logic does showTab use to decide what to render? A: isAddNew → DetailTab; else if tabIndex 0 → DetailTab; if otherModule & tabIndex>0 → getListFromOther(); else getListFromAsset(); wrapped by getSegments."}
{"text":"File: AddOrEditAsset.js, Q: How is the screen’s header title determined? A: Passes title={isAddNew?'ADD_ASSET':'AD_AS_DETAIL_ASSET_TITLE'} to BaseLayout."}
{"text":"File: AddOrEditAsset.js, Q: When does the component fetch asset details? A: useEffect watching [id] calls getEmployees() and if id defined getAssetDetail(id); cleanup resets assetDetail."}
{"text":"File: AddOrEditAsset.js, Q: Why does the component call resetAssetDetail on unmount? A: To clear stale asset data when navigating away from add/edit screen."}
{"text":"File: AddOrEditAsset.js, Q: How is the readOnly prop for DetailTab calculated? A: readOnly = !!otherModule; disables fields and hides save when asset belongs to another module."}
{"text":"File: AddOrEditAsset.js, Q: What are the Modules constants used for? A: Enumerations like WORKORDER and PLANMAINTENANCE compared to moduleId to determine tabs and lists."}
{"text":"File: AddOrEditAsset.js, Q: How does dynamicScrolling in SegmentControl affect the UI? A: Allows horizontal scrolling of tabs when there are more tabs than fit."}
{"text":"File: AddOrEditAsset.js, Q: What is different about the UI when adding compared to editing? A: Adding shows only DetailTab with all fields editable; editing shows tab bar and history/detail views."}
{"text":"File: AddOrEditAsset.js, Q: In what situation does the job request history appear in the tab bar? A: If asset.moduleId===Modules.WORKORDER or editing non-module asset with tabIndex 2."}
{"text":"File: AddOrEditAsset.js, Q: What styling does the Wrapper component provide? A: Styled View with flex:1 to fill available space."}
{"text":"File: AddOrEditAsset.js, Q: Why does SegmentWrapper have a negative top margin? A: margin-top:-20px pulls the segment control up to align with header area."}
{"text":"File: AddOrEditAsset.js, Q: How does the screen adjust available tabs for Plan Maintenance assets? A: When moduleId===Modules.PLANMAINTENANCE, tabValues returns only list & detail tabs."}
{"text":"File: AddOrEditAsset.js, Q: What happens when tabIndex is set to 3? A: getListFromAsset returns <InspectionHistory/> to display inspection history."}
{"text":"File: AddOrEditAsset.js, Q: How does the screen decide whether to wrap contents with getSegments? A: isAddNew → direct DetailTab; editing always wraps with getSegments to include tab bar."}
{"text":"File: AddOrEditAsset.js, Q: How are navigation props propagated to child components? A: navigation prop passed down to DetailTab, MaintenancePlan, JobRequestHistory, InspectionHistory for navigation actions."}
{"text":"File: AddOrEditAsset.js, Q: Why is tabIndex initialised to 0? A: Ensures Detail tab is selected by default on load."}
{"text":"File: AddOrEditAsset.js, Q: How are the tabs filtered when the asset is not tied to a module? A: otherModule undefined → all tabs except list returned by tabValues."}
{"text":"File: AddOrEditAsset.js, Q: What does MaintenancePlan receive when rendered from getListFromAsset? A: isHistory prop and navigation to show maintenance plans in historical view."}
{"text":"File: AddOrEditAsset.js, Q: How does the component handle refreshing employee data and asset details? A: First useEffect calls getEmployees() and getAssetDetail(id) on mount or id change."}
{"text":"File: AddOrEditAsset.js, Q: What prevents leftover data from remaining when leaving the screen? A: resetAssetDetail is called in cleanup of the mount useEffect to clear context state."}
{"text":"File: AddOrEditAsset.js, Q: Why is readOnly set to !!otherModule? A: Converts existence of otherModule to boolean to gate editing and save visibility."}
{"text":"File: AddOrEditAsset.js, Q: What determines whether the Add Asset button shows on the header? A: Controlled by routing; this screen only changes title, save button hidden in readOnly mode."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the component disable the assetType dropdown for imported assets? A: It computes isIMT and passes disabled={isIMT} to the FormLazyDropdown for assetType, preventing changes when true."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What hook provides the form context and validation functions? A: The component uses useCompatibleForm to get formMethods, which wraps react-hook-form with Yup validation."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are company suggestion selections handled? A: FormSuggestionPicker calls its onSelect callback, which sets company and related fields (companyCode, name, address, phone) via setValue when a company is chosen."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: Where does the assetCreationTime field get its value when embedding an external website? A: It uses qrFeedbackSetting.assetType.creationTime if available, otherwise falls back to assetDetail.creationTime in the simplified view."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the code ensure price inputs are formatted correctly? A: It uses FormNumberInput for price, binding to price.text and price.rawValue and leveraging locale-configured separators via temperatureOptions-like props."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What pattern does the FormRadioGroup for locationType follow? A: It renders two radio options defined by locationTypes array and writes the selected numeric value (0 or 1) into an array field."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How is form submission feedback handled? A: onSubmit awaits the API call, and upon success navigates back and emits ‘ReloadAsset’ to refresh parent lists; errors rely on upstream error handling."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How are uploaded file previews synchronized into the form? A: A useEffect watches fileUrls; when updated, setValue(‘files’, fileUrls) ensures the form’s files array matches the uploaded list."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: How does the form prevent invalid email entries? A: onCheckEmail calls validateEmail, and if false shows a modal error before clearing or adding the email."}
{"text":"File: AddOrEditAsset/DetailTab.js, Q: What happens to reminder settings when switching between add and edit modes? A: defaultValues sets isActive false and empty users/emails for new assets; getInitialValueForUpdate populates them from assetDetail for edits."}
{"text":"File: AddOrEditAsset.js, Q: How are tabs conditionally rendered based on the asset’s originating module? A: tabValues inspects otherModule (assetDetail.moduleId) and returns different label arrays for WORKORDER, PLANMAINTENANCE, or default cases."}
{"text":"File: AddOrEditAsset.js, Q: How does the component react to changes in the navigation id param? A: A useEffect listening to [id] calls getEmployees() and fetches new asset details via getAssetDetail(id) whenever the route param changes."}
{"text":"File: AddOrEditAsset.js, Q: What role does resetAssetDetail play on unmount? A: It clears the context’s visitorDetail to avoid stale data when returning to the list or navigating elsewhere."}
{"text":"File: AddAttendance.js, Q: How is distance-based disabling of the submit button implemented? A: The computed distance (in metres) is compared to allowed distanceArea; if greater, flatCheck becomes true and disables the button."}
{"text":"File: AddAttendance.js, Q: How does the map region update when the user’s location changes? A: onReceiveLocation constructs a region object from the new coords and calls setRegion to re-center the map."}
{"text":"File: AddAttendance.js, Q: When is the default checkingType switched to check-out? A: A useEffect watches currentLocation.lastActivity.state and sets checkingType to 1 if the last state was already checked in."}
{"text":"File: AddAttendance.js, Q: How does the component display the last check-in time for check-outs? A: If checkingType is 1 and lastTimeCheckIn exists, it renders a hint with that time formatted via moment().format(‘HH:mm:ss’)."}
{"text":"File: VisitorDetail/index.js, Q: How does VisitorDetail determine whether to show the edit button? A: It uses isGranted(‘Visitors.Update’) to conditionally include rightBtn in baseLayoutProps when the permission returns true."}
{"text":"File: VisitorDetail/index.js, Q: What is displayed if visitorDetail is null? A: The component returns BaseLayout with displayPlaceholder=true, showing a loading or empty state until data arrives."}
{"text":"File: VisitorDetail/index.js, Q: How does the component decide between a single tab and two tabs? A: It checks visitorDetail.isActive; if false it shows only VisitorDetailTab, otherwise wraps both tabs in a TabView when true."}
{"text":"Q: Why does the Reminder component initialize newReminderBefore and newReminderAfter to defaultCost? A: To provide a sensible starting value for the number inputs so users see a default before entering custom values."}
{"text":"Q: How does the sanitizeInput function in ConfigRecurrenceModal ensure numeric inputs remain valid? A: It strips trailing dots or commas from the text, preventing invalid characters in numeric fields."}
{"text":"Q: What is the purpose of the term(str, char) helper in ConfigRecurrenceModal? A: It replaces the last character of a string with another, used to sanitize text inputs by removing unwanted punctuation."}
{"text":"Q: Why does attemptSave in useApprovalHandling check config.some(f => f.isAllowApprove)? A: To determine if any changed field requires approval before submitting, showing the modal only when necessary."}
{"text":"Q: How does handlerMap.ids handle missing labels for IDs? A: It filters out undefined results after mapping, so only valid labels are joined in the output string."}
{"text":"Q: What does FormDisabledProvider do when isReadOnly=true? A: It disables all nested form fields by passing down a disabled flag, preventing any user edits."}
{"text":"Q: How does the useEffect in Reminder notify its parent of changes? A: It subscribes via watch and calls onChange(value) on every form update, so the parent receives the latest reminder state."}
{"text":"Q: Why use React.Children.map with clone in FormFieldConfigurable? A: To recursively traverse and inject new props into every nested child element based on config rules."}
{"text":"Q: What role does FieldPrefixProvider’s excludeKeys prop play? A: It lists fieldKeys that should not receive the prefix, allowing selective prefixing control."}
{"text":"Q: How does onChangeTenantId react to isPublic changes? A: It re-fetches team or assignee lists for the current tenant whenever the public/site toggle flips, keeping dropdowns in sync."}
{"text":"// ===== TaskManagement ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: Why is generateAction used for GET_TASK_LIST? A: To produce consistent REQUEST, SUCCESS, and FAILURE action types automatically without manual string concatenation."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: What saga effect handles GET_PRIORITY_LIST.REQUEST? A: takeEvery(GET_PRIORITY_LIST.REQUEST, handleGetPriorityList) triggers the priority fetch and dispatches corresponding SUCCESS or FAILURE actions."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: How does GET_TEAMS_BY_TENANT.SUCCESS impact state? A: It calls transformWithCOTags on the payload and assigns the result to state.teamList for UI consumption."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: What side effect does addTask trigger after the API call? A: It uploads associated files and then navigates back via NavigationServices.goBack()."}
{"text":"// ===== Feedback ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: How is getSources implemented in useFeedback? A: It dispatches GET_SOURCES_REQUEST, calls RequestApi.getFeedbackSources, then dispatches GET_SOURCES_SUCCESS or GET_SOURCES_FAILURE."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: Which watcher handles GET_TYPES_REQUEST? A: takeEvery(GET_TYPES_REQUEST, handleGetTypes) listens for GET_TYPES_REQUEST to fetch types and dispatch GET_TYPES_SUCCESS or FAILURE."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: What does DETAIL_FB_QR_SUCCESS do in the reducer? A: It sets state.qrFBDetail = payload and isLoading = false, marking the QR feedback detail as loaded."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: Why does editQrFB return true on success? A: To signal the calling component that the QR feedback edit operation completed successfully."}
{"text":"// ===== Booking ====="}
{"text":"// ===== API Handler Wrappers ====="}
{"text":"Q: What wrapper is used for getAmenities? A: withErrorHandling(GET_AMENITIES, getAmenities) ensures GET_AMENITIES.REQUEST, SUCCESS, and FAILURE actions are dispatched around the API call."}
{"text":"// ===== Action & Saga Integration ====="}
{"text":"Q: Which saga watches VALIDATE_RECURRING_BOOKING.REQUEST? A: takeEvery(VALIDATE_RECURRING_BOOKING.REQUEST, handleValidateRecurringBooking) triggers pre-validation of a recurring booking."}
{"text":"// ===== Reducer & State Management ====="}
{"text":"Q: How does FILTER_BOOKINGS.SUCCESS update state? A: It invokes state.list.setData(payload) and deep-clones the list to apply the new filtered booking items immutably."}
{"text":"// ===== Business Logic & Side Effects ====="}
{"text":"Q: Why upload booking files only after addBooking response? A: Because the response provides a GUID needed to correctly associate the uploaded files with the new booking."}
{"text":"Q: Which hooks provide external data and logic to TaskManagement, and what do they each supply? A: `useTaskManagement` supplies task lists and API methods; `useUser` supplies `tenant` and `isControlOffice`; `useTenant` supplies `tenantList` and `getTenantList`."}
{"text":"Q: What local state does TaskManagement manage with `useState`, and why? A: `selectedFilter` stores the current filter; `filterTenantId` tracks which tenant’s teams to fetch; `keyword` holds the live search term."}
{"text":"Q: What three `useEffect` blocks in TaskManagement handle data fetching and when do they run? A: (1) On `teamList` change – fetch users; (2) On mount (`[]`) – fetch statuses, priorities, teams, tenants and subscribe to `ReloadTM`; (3) On `[selectedFilter, keyword]` – re-run `getList` when filters or search change."}
{"text":"Q: How is `filterData` defined to drive the `Filter` component? A: As an object mapping filter keys to config objects containing `title`, `type`, `options`, async `getList`, `onChange`, and `resetPropsOnChange` fields."}
{"text":"Q: What parameters does `getList(page, filter)` construct for `getTaskList`? A: It includes `page`, `keyword`, `pageSize`, `statusIds`, `priorityId`, ISO dates (`fromDate`,`toDate`), `isOverdue`, `isPublic`, `tenantId`, `teamIds`, and `userIds`."}
{"text":"Q: How is each task item rendered and wired to navigation? A: `renderItem` returns `<ItemTask>` with `onPress` calling `NavigationService.navigate('editTask',{id,isSeries})`."}
{"text":"Q: What native event does TaskManagement listen for and why? A: It listens for `'ReloadTM'` via `DeviceEventEmitter` to trigger `getList()` whenever tasks are updated externally."}
{"text":"Q: How are dates normalized before sending to the API? A: By calling `convertDate.stringToISOString(fromDate)` (and similarly for `toDate`), ensuring ISO format."}
{"text":"Q: Which hooks provide data and methods to TaskManagementComment? A: `useTaskManagement` gives `comments`, `mentionUsersDic`, and actions `getCommentByTask`, `getMentionUsers`, `addComment`; `useUser` provides `user` and `tenant`; `useCompatibleForm` sets up form methods."}
{"text":"Q: How is React Hook Form integrated into TaskManagementComment? A: Wrapped in `<FormProvider>`, it uses `watch()` to track `message`, `handleSubmit(onSendMessage)` to submit, and `setValue('message','')` to reset after sending."}
{"text":"Q: How does AddOrEditBooking determine whether it’s adding a new booking or editing an existing one? A: It reads `useRoute().name`, setting `isAddNew = (name==='addBooking')` and `isEdit = (name==='editBooking')`, which drives data loading, form defaults, and conditional rendering."}
{"text":"Q: What form controls and warnings are only rendered in “add new” mode? A: When `isAddNew` is true it shows `<FormCalendarPicker>` for date selection, a `BookingWarningText` if outside booking periods, and `<FormSlotView>` to choose time slots—none of which appear in edit mode."}
{"text":"Q: How does the component populate form values when editing? A: In the effect for `[bookingDetail]`, it calls `reset(getInitialValuesForUpdate())`, where `getInitialValuesForUpdate()` maps fields from `bookingDetail`—including nested `status`, `paymentStatus`, `depositPrice`, `unit`/`company`/`email` based on `bookingType`—into the form’s default values."}
{"text":"Q: What differences exist in the payload built by `onSave` for add vs edit? A: For adds, it computes `slotStartTime` and `slotEndTime` from selected slots and includes them; for edits, it uses the original `bookingDetail.startDate`/`endDate`. Both include `amenityId`, `statusCode`, `bookingType`, and conditional `paymentStatus`, file, and contact/company fields before calling `addBooking` or `updateBooking`."}
{"text":"Q: How is validation schema adjusted for add vs edit modes? A: The Yup schema conditionally adds a `slots` test only if `isAddNew` is true, requiring at least one slot selected for new bookings; edit mode skips slot validation entirely."}
{"text":"Q: Which side effects run only when editing an existing booking? A: The effect on `[id]` invokes `getBookingDetail(id)` and returns `resetBookingDetail()` on cleanup; another effect watches `bookingDetail` to fetch files, amenity details and toggle `isDisabledForm` based on status codes."}
{"text":"Q: How does the form become disabled for canceled or declined bookings? A: In the `useEffect([bookingDetail])`, after resetting the form it checks `bookingDetail.status.statusCode`; if it equals `CANCELED` or `DECLINED`, it sets `isDisabledForm=true`, which disables all inputs via `<FormDisabledProvider>`."}
{"text":"Q: What is the purpose of `bookingWarningMessage` and when is it computed? A: It warns the user if the current time is outside the allowed booking period; it's computed in a useMemo based on `bookingPeriods` and `amenityDetail` using `getTimePeriod` and `getTime`."}
{"text":"Q: How does `getTimePeriod(period.from, period.fromTime)` work? A: It combines a date string and a time string into a JavaScript `Date` object representing the full timestamp for period boundaries."}
{"text":"Q: Why does the code guard `if (!bookingPeriods || !amenityDetail) return null;` in the bookingWarningMessage useMemo? A: To avoid errors when data isn't loaded, returning null until both periods and amenity details are available."}
{"text":"Q: What does the empty state look like when there are no slots? A: `SlotView` checks `_.size(slots) > 0`; if false, it renders `<EmptySlotMessage>` with text key `BK_NEW_SLOT_EMPTY`."}
{"text":"Q: How are unavailable slots rendered? A: If `item.isAvailable` is false, `SlotView` shows an `<UnavailableSlot>` styled with a grey background and no touch handler, displaying time text only."}
{"text":"Q: How does the component disable form inputs when editing a canceled or declined booking? A: After fetching `bookingDetail`, it checks if `statusCode` is CANCELED or DECLINED and sets `isDisabledForm=true`, which `<FormDisabledProvider>` uses to disable all fields."}
{"text":"Q: How are default form values provided for a new booking? A: Via `initialValues`, including defaults for status (REQUESTED), payment (NOT_YET_DEPOSIT), `bookingType` ([occupier]), empty slots, files, etc."}
{"text":"Q: How does `getInitialValuesForUpdate()` shape the form for editing? A: It maps fields from `bookingDetail` into the same shape as the form’s `defaultValues`, including nested `unit`/`company`/`email` objects based on `bookingType`."}
{"text":"Q: How does the effect on `[bookingSlots]` work? A: When `bookingSlots` updates from API, if `isAddNew`, it sets the form field `slots` to that new array so the slot picker shows available times."}
{"text":"Q: How is the `status` field represented in the payload? A: It takes `formValues.status.statusCode` and assigns it to the `status` key in `payload`."}
{"text":"Q: How are API errors handled during add/update operations? A: Errors in `recurringBooking` are caught and show `Alert.alert('ERROR', error.message)`; similar try/catch could wrap `addBooking`/`updateBooking` to alert the user."}
{"text":"Q: What happens after a successful add or update? A: It emits `DeviceEventEmitter.emit('UpdateListBooking')` to refresh other screens, then calls `navigation.goBack()` to return."}
{"text":"Q: How does the component avoid race conditions between slot fetch and amenity change? A: Effects include `amenityDetail` in their dependency arrays, so `getBookingTimeSlots` runs only when `amenityDetail` is loaded or updated, preventing invalid API calls."}
{"text":"File: AddOrEditBooking.js, Q: What does `useBooking()` provide to the AddOrEditBooking component? A: It exposes booking state (`bookingDetail`, `statusList`, `paymentStatusList`, `bookingPurposes`, `amenityDetail`, `bookingSlots`, `amenityList`) and actions (`getBookingDetail`, `addBooking`, `updateBooking`, `getAmenityDetail`, `validateRecurringBooking`, `getBookingStatus`, `getPaymentStatus`, `getBookingPurpose`, `getAmenities`, `getAllTimeSlots`) for managing booking CRUD, lookups, slot fetching, and recurring validation."}
{"text":"File: AddOrEditBooking.js, Q: How is `getBookingDetail` used in edit mode? A: In a `useEffect([id])` hook, when `!isAddNew` and `id` is defined, `getBookingDetail(id)` fetches the existing booking’s details to populate the form."}
{"text":"File: AddOrEditBooking.js, Q: When should `addBooking` be called? A: In the `onSave` handler, if `isAddNew` is true and no `recurrence` is defined, after constructing the payload with selected slots and form values, `addBooking(payload)` persists the new booking."}
{"text":"File: AddOrEditBooking.js, Q: What role does `getAmenityDetail` play? A: Called when an amenity is selected or when editing an existing booking, it fetches detailed `amenityDetail` (rules, remarks) which drives slot fetching, deposit logic, and policy display."}
{"text":"File: AddOrEditBooking.js, Q: Why call `getBookingStatus`, `getPaymentStatus`, and `getBookingPurpose` on mount? A: To load lookup lists for status codes, payment statuses, and booking purposes into dropdowns, ensuring the form has the correct options before user interaction."}
{"text":"File: AddOrEditBooking.js, Q: What does `getAllTimeSlots` do and when is it called? A: It fetches available time slots for a given amenity and date range; invoked in `getBookingTimeSlots()` inside a `useEffect([startDate,endDate,amenityDetail])` to refresh slots whenever the date or amenity changes."}
{"text":"File: AddOrEditBooking.js, Q: How are `bookingRuleFiles` fetched and used? A: When `isAddNew` and `amenityDetail` changes, `getByReferenceIdAndModuleNames(amenityDetail.guid,'','bookingRuleFiles')` loads policy docs, which are then displayed via `<BookingPolicyRules>`."}
{"text":"File: AddOrEditBooking.js, Q: How do `bookingSlots` from context and the form field `slots` stay in sync? A: A `useEffect([bookingSlots])` calls `formMethods.setValue('slots', bookingSlots)` when `bookingSlots` updates, ensuring the slot picker displays the latest availability."}
{"text":"File: AddOrEditBooking.js, Q: How do all these hooks orchestrate the add-mode data-fetch sequence? A: On mount load lookups; on amenity select fetch detail → fetch rule files → fetch slots → populate form; on slot or date changes refetch slots → recalc deposit."}
{"text":"File: AddOrEditBooking.js, Q: How do all these hooks orchestrate the edit-mode data-fetch sequence? A: On mount load lookups; effect on `id` fetches bookingDetail → effect on bookingDetail fetches amenityDetail & files → reset form → effect fetch rule files & slots → disable form if canceled."}
{"text":"File: AddOrEditBooking.js, Q: What error handling should wrap these hook calls? A: Each async action (getBookingDetail, getAmenityDetail, getAllTimeSlots, validateRecurringBooking, addBooking, updateBooking) should use try/catch to `Alert.alert(I18n.t('ERROR'), error.message)` and optionally retry or disable UI."}
{"text":"File: AddOrEditBooking.js, Q: How might you unit-test the component’s interactions with these hooks? A: Mock the `useBooking`, `useApp`, `useUser`, and `useFile` hooks to return fake data/functions, then assert that effects call the correct methods and form values update accordingly."}
{"text":"File: AddOrEditBooking.js, Q: How could you refactor hook-driven logic into custom hooks for clarity? A: Extract booking-detail logic into `useBookingDetail(id,isAddNew)`, amenity logic into `useAmenityData(amenityId)`, and slot/deposit logic into `useSlotAndDeposit(slots,amenityRules)` hooks to declutter the component."}
{"text":"File: AddOrEditBooking.js, Q: How is the `validationSchema` memoized and why? A: It’s wrapped in `useMemo` with `[isAddNew]` as a dependency, so the schema only recomputes when the add/edit mode changes, avoiding unnecessary re-validations on every render."}
{"text":"File: AddOrEditBooking.js, Q: How does the conditional `when('bookingType')` logic work for `unit`, `company`, and `email`? A: Yup’s `.when` checks the first element of `bookingType`; if it matches a target, it applies `.required(requiredMessage)`, otherwise marks the field as nullable."}
{"text":"File: AddOrEditBooking.js, Q: What does the custom `.test('at-least-one-selected', ...)` do for `slots`? A: It defines a custom validation named ‘at-least-one-selected’ that fails unless the array contains at least one element with `slot.isCheck === true`, enforcing slot selection for new bookings."}
{"text":"File: AddOrEditBooking.js, Q: What is the primary purpose of the `calculateDepositPrice` function? A: To compute and update the booking deposit based on the selected time slots and the amenity’s predefined time-rule pricing."}
{"text":"File: AddOrEditBooking.js, Q: What is the primary purpose of the `recurringBooking` function? A: To validate and prepare a recurring series of booking slots before actually saving them, by calling `validateRecurringBooking` and then showing a confirmation modal."}
{"text":"File: AddOrEditBooking.js, Q: How does `onSave` choose between `addBooking` and `updateBooking`? A: It checks `!isAddNew`: if true (edit mode), calls `updateBooking(payload)`; otherwise calls `addBooking(payload)` for new bookings."}
{"text":"File: AddOrEditBooking.js, Q: What does the `getTitle` function do? A: It returns the screen title based on mode: if `isAddNew` is true, it returns the localized string for 'ADD_BOOKING'; otherwise it returns 'EDIT_BOOKING', ensuring the header reflects whether the user is adding or editing a booking."}

{"text":"File: VisitorScreen.js, Q: What does useVisitor() provide to VisitorScreen? A: It returns visitors state and actions getAllVisitors, getVisitorReasons, and scanQRVisitor for loading reasons and managing the visitor list."}
{"text":"File: VisitorScreen.js, Q: How does filterData adapt to isOfficeSite? A: If isOfficeSite is false it shows a buildingId dropdown; if true it shows a paginated companyId LIST_SELECT with search."}
{"text":"File: VisitorScreen.js, Q: What triggers the [textSearch, selectedFilter] effect? A: Any change to the search text or applied filter calls getList(1) to refresh the visitor list."}
{"text":"File: VisitorScreen.js, Q: How are 'all' values handled in getList? A: It maps 'all' buildingId or companyId to undefined so the API doesn’t filter by that field when it’s not narrowed."}
{"text":"File: JobRequest.js, Q: What contexts does JobRequest use and why? A: It uses useJobRequest for JR/task data, useTeam for teams, useAsset for asset lookup, useInventoryRequest for IR settings, and useApp for global settings to load all necessary data."}
{"text":"File: JobRequest.js, Q: How many tab indices control which list is shown? A: Three: tabIndex for JR vs tasks, listJRTabIndex for all/team/my JR, and listTaskTabIndex for all/my tasks."}
{"text":"File: JobRequest.js, Q: How does getValueForOptions determine which list to use? A: It checks tabIndex and uses listJRTabIndex when in JR mode or listTaskTabIndex when in task mode to select the proper fetch action."}
{"text":"File: JobRequest.js, Q: What does getList do when tabIndex equals zero? A: It builds filterParams for JR only—including statusIds, priorityIds, teamIds, date ISO strings, overdue and extra service toggles—and calls the appropriate JR fetch."}
{"text":"File: Inventory.js, Q: What does useInventory() provide to the Inventory component? A: It returns inventories list state and lookup states filterCategories, subCategories, warehouses, plus actions getAllInventories, getFilterCategories, getSubCategories, getLocations, detailInventory, and getWareHouses."}
{"text":"File: Inventory.js, Q: What keys does defaultFilter contain and why? A: defaultFilter has isActive set to [true] to default to active items and isMinimumBalance set to [undefined] to leave that toggle unset initially."}
{"text":"File: Inventory.js, Q: How does getList normalize selectedFilter for the API? A: It spreads filter, then remaps warehouseIds to filter.warehouseIds.id, categoryIds to either subCategoryId or categoryIds, and extracts booleans from the first elements of isActive and isMinimumBalance arrays."}
{"text":"File: Inventory.js, Q: Why disable the subCategoryId dropdown when no categoryIds is selected? A: The dropdownProps disabled flag ensures users must pick a parent category before choosing a subcategory, preventing invalid filter states."}
{"text":"File: ListPlanMaintenance.js, Q: How is planTab calculated? A: It subtracts DashboardStatisticTypes.PLAN_MAINTENANCE from statisticType, aligning the statistic code to the correct tab index (0 for all, 1 for team, 2 for my PM)."}
{"text":"File: ListPlanMaintenance.js, Q: What does requestGetTaskList do? A: It builds a params object with page, PageSize, keyword, and StatusIds, then calls getPlanTask or getMyPlanTask based on the current task tab index."}
{"text":"File: ListPlanMaintenance.js, Q: How does requestGetListPlan normalize filter and sort? A: It extracts fromDate and toDate, statusIds, priorityIds, teamIds, and overdue flag, formats dates with moment, reads the first sort choice, and builds API params including isDescending and orderByColumn."}
{"text":"File: Setting.js, Q: How is developer mode enabled? A: Tapping the version text increments a counter and after ten taps calls setDeveloperMode(true) and shows a success toast."}
{"text":"File: Setting.js, Q: Explain the flow in changeSwitchValue. A: When enabling the biometric toggle it navigates to the terms screen; when disabling it opens a confirmation modal before turning off biometrics."}
{"text":"File: Setting.js, Q: Describe the onLogout function. A: It calls logout from the app context, triggering the global logout flow and redirecting the user to the login screen."}
{"text":"File: Delivery.js, Q: What triggers data fetch when filters or search change? A: A useEffect watching textSearch and selectedFilter calls getList(1) whenever either value changes."}
{"text":"File: Delivery.js, Q: How is the batch pick-up modal triggered? A: Clicking the Batch Pick Up button calls showPickUpModal, which fetches parcels in the selected unit and either asks confirmation or opens the checkout modal."}
{"text":"File: Delivery.js, Q: What conditions enable the Batch Pick Up button? A: allowCheckOut must be true: at least one selected item, all in the same unitId, and all with statusId equal to WAITING_TO_RECEIVED."}
{"text":"File: Delivery.js, Q: How are individual item selections handled? A: checkItem toggles an item in or out of the selectedItems array based on its id."}
{"text":"File: Delivery.js, Q: How does onCheckAll synchronize selectedItems and isSelectAll? A: It sets isSelectAll to the passed boolean and sets selectedItems to either the full data array when true or an empty array when false."}
{"text":"File: Delivery.js, Q: How is the alert message constructed in showPopUpToAskCheckOut? A: It uses localized strings for the prefix and suffix around the count of unselected parcels to inform the user how many remain."}
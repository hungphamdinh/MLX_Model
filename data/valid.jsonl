{"text":"File: Booking.js, Q: What type of value does `multipleOptions` hold in the component state? A: It holds an array of string constants defined in `multipleOptionValue` (e.g., 'isIncludeExpired', 'onlyActiveAmenity'), representing which boolean toggles are active."}
{"text":"File: Booking.js, Q: How is `FilterTypes.DROPDOWN` used to customize the `amenityIds` filter? A: By setting `type: FilterTypes.DROPDOWN` and providing `dropdownProps.showSearchBar: true`, it renders a searchable dropdown for amenities to handle potentially large lists."}
{"text":"File: TaskManagement.js, Q: Why use `React.useEffect(() => getList(1), [])` with an empty dependency array? A: To fetch the first page of tasks exactly once on mount, ensuring the list is populated before the user interacts."}
{"text":"File: TaskManagement.js, Q: How are non-control-office users prevented from changing the tenant filter? A: The `tenantFilter` config includes `disabled: !isControlOffice`, disabling the dropdown unless `isControlOffice` is true."}
{"text":"File: Asset.js, Q: What does the `listExist` prop signal in list-select filters? A: It indicates that initial options data (`.data`) is already loaded for the dropdown, so the component won’t call `getList` again on first render."}
{"text":"File: Asset.js, Q: Why call `getWorkflowStatus(Modules.INSPECTION)` only if `statusList` is empty? A: To avoid redundant API calls—only fetch workflow statuses when they haven’t been loaded yet."}
{"text":"File: Feedback.js, Q: What effect does `onTabChange` have on filter state? A: It sets the new `tabIndex` and immediately resets `selectedFilter` to a deep clone of `defaultFilter`, clearing all filters when switching tabs."}
{"text":"File: Feedback.js, Q: How is the `phoneNumber` filter defined in `filterQRFeedback`? A: As a free-text field: `{ phoneNumber: { title: 'COMMON_PHONE_NUMBER' } }`, allowing users to search by phone number."}
{"text":"File: MeterReading.js, Q: What is the default value of the `year` filter? A: An array containing the current year as a string: `[`${new Date().getFullYear()}`]`, so the list defaults to the current year’s readings."}
{"text":"File: MeterReading.js, Q: Which props determine column layout in the `period` and `year` filters? A: `numOfColumns: 4` for `period` and `numOfColumns: 3` for `year`, controlling how many options display per row."}
{"text":"File: MeterReading.js, Q: How does the component handle missing array selections for single-select filters? A: It uses `_.first(selectedFilter[field])`, which returns `undefined` if the array is empty, safely handling no-selection cases."}
{"text":"File: MeterReading.js, Q: What is the initial state of `selectedFilter`? A: It’s set to `defaultFilter` via `useState(defaultFilter)`, so the UI starts with no date range and only active, current-year readings."}
{"text":"File: MeterReading.js, Q: What navigation hook is used to transition screens? A: The `navigation` prop from React Navigation—e.g., `navigation.navigate('meterReadingDetail',{…})`."}
{"text":"File: MeterReading.js, Q: How is the empty-state icon configured in `<AppList>`? A: By passing `iconName: icons.jobRequestEmpty` in `listProps`, which `<AppList>` renders when `data` is empty."}
{"text":"File: MeterReading.js, Q: Which prop on `<BaseLayout>` disables padding around child content? A: `noPadding: true`, causing the layout to render without default inner spacing."}
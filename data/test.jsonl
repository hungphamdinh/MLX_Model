{"text":"File: Booking.js, Q: What does `dateRange: {}` in the `filters` object represent? A: It tells `<Filter>` to use the default date-picker UI without customizing title or type, inheriting default behavior from the component."}
{"text":"File: Booking.js, Q: Where and why is the `sorting` parameter set in `getList`? A: In `filterParams`, `sorting: 'createdAt desc'` ensures the API returns the newest bookings first."}
{"text":"File: TaskManagement.js, Q: How are selected `teamIds` passed to the API? A: As the `teamIds` array within `getTaskList({ …, teamIds })`, filtering tasks by the chosen teams."}
{"text":"File: TaskManagement.js, Q: Why use `_.cloneDeep(defaultFilter)` when clearing filters? A: To produce a fresh copy of `defaultFilter`, preventing unintentional mutations of the original filter template."}
{"text":"File: TaskManagement.js, Q: What does `valKey: 'value'` refer to in the `multipleOptions` filter? A: It tells `<Filter>` to use each option’s `value` property (e.g., `'isOverdue'`) as the selected key."}
{"text":"File: Asset.js, Q: Which prop on `<Filter>` handles the text search input? A: `onSearch={(key) => setKeyword(key)}`, updating `keyword` state as the user types."}
{"text":"File: Asset.js, Q: How is `selectedFilter` updated when the user applies new filters? A: `<Filter>` calls `onCompleted(newFilter)` and the handler `onApplyFilter` invokes `setSelectedFilter(newFilter)`."}
{"text":"File: Asset.js, Q: Which condition hides the Add button in the header? A: `showAddButton` is set to `false` if `qrFeedbackSetting?.isEmbedExternalWebsite` is `true`, disabling creation in embedded contexts."}
{"text":"File: Asset.js, Q: What permission string gates the Add screen? A: `addPermission: 'Asset.Create'`, which `<BaseLayout>` uses to check user rights before showing the button."}
{"text":"File: Feedback.js, Q: How does the component listen for external updates to feedback lists? A: It calls `DeviceEventEmitter.addListener('UpdateListFeedback', ...)` in a `useEffect`, triggering `getList` on each event."}
{"text":"File: Feedback.js, Q: Why include `tabIndex` in the third effect’s dependency array? A: To re-subscribe the event listener for the correct `getList` (FB vs QR) whenever the user switches tabs."}
{"text":"File: Feedback.js, Q: What placeholder text is shown for QR Feedback search? A: `'QR_FB_SEARCH_PLACEHOLDER'`, set via `searchPlaceHolder={tabIndex===0?'FB_SEARCH_PLACEHOLDER':'QR_FB_SEARCH_PLACEHOLDER'}`."}
{"text":"File: MeterReading.js, Q: Why wrap the meter-create navigation in `openCreateRecord`? A: To centralize the navigation logic and allow reuse for both button tap and other triggers (e.g., manual entry callback)."}
{"text":"File: MeterReading.js, Q: How is the QR-scanner button added to the header? A: By passing `rightBtn: rightButtonProps` (with icon, size, onPress) in `mainLayoutProps` to `<BaseLayout>`."}
{"text":"File: MeterReading.js, Q: What does `isGranted('MeterReading.Create')` control? A: It conditionally enables the QR-scanner button in the header only for users with create permissions."}
{"text":"Q: How does the `SlotView` component determine how many slots have been selected? A: It uses `useMemo` to count `slots.filter(item => item.isCheck).length` and stores it in `totalSelected`, recomputing only when `slots` changes."}
{"text":"Q: What condition makes the “flag” icon appear on a slot? A: `showFlag` becomes true when `totalSelected > 0 && totalSelected < numberSlot`, and each unselected slot adjacent to a selected one gets `isFlag=true`, causing `<SlotFlag/>` to render."}
{"text":"Q: How does `FormSlotView` integrate `SlotView` into React Hook Form? A: It uses `useCommonFormController(name)` to get `value`/`setFieldValue`, wraps `SlotView` in `<FormControl>`, and in `onSlotsChange` calls `setFieldValue(newSlots)` plus any `onChange` prop."}
{"text":"Q: How is `calculateDepositPrice` memoized? A: Wrapped in `useCallback` depending only on `slots`, so the reference changes only when slots array changes."}
{"text":"Q: What happens when the user taps a slot? A: `onSelectSlot(index)` toggles `isCheck` for that slot, clears other checks if selecting a non-flag new slot, then recomputes `isFlag` for neighbors before calling `onSlotsChange([...slots])`."}
{"text":"Q: How does the component decide between “Add” and “Edit” mode at startup? A: It reads `useRoute().name` and sets `isAddNew = (name==='addBooking')`, `isEdit = (name==='editBooking')`. This controls which effects run, which UI elements display, and whether `addBooking` or `updateBooking` is called."}
{"text":"Q: Which pieces of data must be loaded before rendering the form, and how is loading handled? A: `amenityDetail` (to know available slots, deposit rules), `bookingSlots` (initial slot availability), and reference files. A `<LoaderContainer>` wraps the form, showing `<BookingLoading>` until `amenityDetail` is truthy."}
{"text":"Q: How are `startDate` and `endDate` computed for a new booking? A: They derive from the first and last checked slot’s `startTime` and `endTime` respectively, inside `onSave` when `isAddNew` is true."}
{"text":"Q: What logic handles recurring bookings inside `onSave`? A: If `formValues.recurrence` exists, `onSave` calls `await recurringBooking(formValues, payload)` and returns early, skipping the single-date API call."}
{"text":"Q: How does `validateRecurringBooking` integrate with `statusList`? A: The call returns `res.status` code; `matchedStatus` is found via `statusList.find` to get the human-readable status name for the confirmation modal."}